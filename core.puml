@startuml
namespace api {
    interface API  {
        + Start() error
        + Stop()
        + Destroy()
        + Reload() error
        + Monitor(id string, data MonitorData) (MonitorResponse, error)

    }
    class AVstream << (S,Aquamarine) >> {
        + Input AVstreamIO
        + Output AVstreamIO
        + Aqueue uint64
        + Queue uint64
        + Dup uint64
        + Drop uint64
        + Enc uint64
        + Looping bool
        + LoopingRuntime uint64
        + Duplicating bool
        + GOP string

        + Unmarshal(av *app.AVstream)

    }
    class AVstreamIO << (S,Aquamarine) >> {
        + State string
        + Packet uint64
        + Time uint64
        + Size uint64

        + Unmarshal(io *app.AVstreamIO)

    }
    class About << (S,Aquamarine) >> {
        + App string
        + Auths []string
        + Name string
        + ID string
        + CreatedAt string
        + Uptime uint64
        + Version Version

    }
    class AboutHandler << (S,Aquamarine) >> {
        - restream restream.Restreamer
        - auths []string

        + About(c echo.Context) error

    }
    class Command << (S,Aquamarine) >> {
        + Command string

    }
    class Config << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + LoadedAt time.Time
        + UpdatedAt time.Time
        + Config ConfigData
        + Overrides []string
        + URL string
        + Token string
        + Client *http.Client
        + Logger log.Logger

        + Unmarshal(cfg *config.Config)

    }
    class ConfigData << (S,Aquamarine) >> {
    }
    class ConfigHandler << (S,Aquamarine) >> {
        - store store.Store

        + Get(c echo.Context) error
        + Set(c echo.Context) error
        + Reload(c echo.Context) error

    }
    class ConfigVersion << (S,Aquamarine) >> {
        + Version int64

    }
    class Error << (S,Aquamarine) >> {
        + Code int
        + Message string
        + Details []string

        + Error() string

    }
    class FSConfig << (S,Aquamarine) >> {
        + Type string
        + Mountpoint string
        + Handler *handler.FSHandler

    }
    class FSHandler << (S,Aquamarine) >> {
        - filesystems <font color=blue>map</font>[string]FSConfig

        + GetFile(c echo.Context) error
        + PutFile(c echo.Context) error
        + DeleteFile(c echo.Context) error
        + ListFiles(c echo.Context) error
        + List(c echo.Context) error

    }
    class FileInfo << (S,Aquamarine) >> {
        + Name string
        + Size int64
        + LastMod int64

    }
    class FilesystemInfo << (S,Aquamarine) >> {
        + Name string
        + Type string
        + Mount string

    }
    class GraphHandler << (S,Aquamarine) >> {
        - resolver resolver.Resolver
        - path string
        - queryHandler *handler.Server
        - playgroundHandler http.HandlerFunc

        + Query(c echo.Context) error
        + Playground(c echo.Context) error

    }
    class GraphQuery << (S,Aquamarine) >> {
        + Query string
        + Variables <font color=blue>interface</font>{}

    }
    class GraphResponse << (S,Aquamarine) >> {
        + Data <font color=blue>interface</font>{}
        + Errors []<font color=blue>interface</font>{}

    }
    class JWT << (S,Aquamarine) >> {
        + AccessToken string
        + RefreshToken string

    }
    class JWTRefresh << (S,Aquamarine) >> {
        + AccessToken string

    }
    class LogHandler << (S,Aquamarine) >> {
        - buffer log.BufferWriter

        + Log(c echo.Context) error

    }
    class Login << (S,Aquamarine) >> {
        + Username string
        + Password string

    }
    interface Metadata  {
    }
    class MetricsConfig << (S,Aquamarine) >> {
        + Metrics monitor.HistoryReader

    }
    class MetricsDescription << (S,Aquamarine) >> {
        + Name string
        + Description string
        + Labels []string

    }
    class MetricsHandler << (S,Aquamarine) >> {
        - metrics monitor.HistoryReader

        + Describe(c echo.Context) error
        + Metrics(c echo.Context) error

    }
    class MetricsQuery << (S,Aquamarine) >> {
        + Timerange int64
        + Interval int64
        + Metrics []MetricsQueryMetric

    }
    class MetricsQueryMetric << (S,Aquamarine) >> {
        + Name string
        + Labels <font color=blue>map</font>[string]string

    }
    class MetricsResponse << (S,Aquamarine) >> {
        + Timerange int64
        + Interval int64
        + Metrics []MetricsResponseMetric

        + Unmarshal(data []monitor.HistoryMetrics, timerange time.Duration, interval time.Duration)

    }
    class MetricsResponseMetric << (S,Aquamarine) >> {
        + Name string
        + Labels <font color=blue>map</font>[string]string
        + Values []MetricsResponseValue

    }
    class MetricsResponseValue << (S,Aquamarine) >> {
        + TS time.Time
        + Value float64

        + MarshalJSON() ([]byte, error)

    }
    class MinimalAbout << (S,Aquamarine) >> {
        + App string
        + Auths []string
        + Version VersionMinimal

    }
    class MonitorData << (S,Aquamarine) >> {
        + Version string
        + Uptime uint64
        + SysCPU []json.Number
        + SysMemory []json.Number
        + SysDisk []json.Number
        + FSMem []json.Number
        + FSDisk []json.Number
        + NetTX []json.Number
        + Session []json.Number
        + ProcessStates []uint64
        + Processes *[]MonitorProcessData

    }
    class MonitorProcessData << (S,Aquamarine) >> {
        + ID string
        + RefID string
        + CPU []json.Number
        + Mem []json.Number
        + Uptime uint64
        + Output <font color=blue>map</font>[string][]uint64

    }
    class MonitorResponse << (S,Aquamarine) >> {
        + Next uint64

    }
    class PlayoutHandler << (S,Aquamarine) >> {
        - restream restream.Restreamer

        - request(method string, addr string, path string, contentType string, data []byte) (*http.Response, error)

        + Status(c echo.Context) error
        + Keyframe(c echo.Context) error
        + EncodeErrorframe(c echo.Context) error
        + SetErrorframe(c echo.Context) error
        + ReopenInput(c echo.Context) error
        + SetStream(c echo.Context) error

    }
    class PlayoutStatus << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Stream uint64
        + Queue uint64
        + AQueue uint64
        + Dup uint64
        + Drop uint64
        + Enc uint64
        + Looping bool
        + Duplicating bool
        + GOP string
        + Debug <font color=blue>interface</font>{}
        + Input PlayoutStatusIO
        + Output PlayoutStatusIO
        + Swap PlayoutStatusSwap

        + Unmarshal(status playout.Status)

    }
    class PlayoutStatusIO << (S,Aquamarine) >> {
        + State string
        + Packet uint64
        + Time uint64
        + Size uint64

        + Unmarshal(io playout.StatusIO)

    }
    class PlayoutStatusSwap << (S,Aquamarine) >> {
        + Address string
        + Status string
        + LastAddress string
        + LastError string

        + Unmarshal(swap playout.StatusSwap)

    }
    class Probe << (S,Aquamarine) >> {
        + Streams []ProbeIO
        + Log []string

        + Unmarshal(p *app.Probe)

    }
    class ProbeIO << (S,Aquamarine) >> {
        + Address string
        + Format string
        + Index uint64
        + Stream uint64
        + Language string
        + Type string
        + Codec string
        + Coder string
        + Bitrate json.Number
        + Duration json.Number
        + FPS json.Number
        + Pixfmt string
        + Width uint64
        + Height uint64
        + Sampling uint64
        + Layout string
        + Channels uint64

        + Unmarshal(io *app.ProbeIO)

    }
    class Process << (S,Aquamarine) >> {
        + ID string
        + Type string
        + Reference string
        + CreatedAt int64
        + UpdatedAt int64
        + Config *ProcessConfig
        + State *ProcessState
        + Report *ProcessReport
        + Metadata Metadata

    }
    class ProcessConfig << (S,Aquamarine) >> {
        + ID string
        + Type string
        + Reference string
        + Input []ProcessConfigIO
        + Output []ProcessConfigIO
        + Options []string
        + Reconnect bool
        + ReconnectDelay uint64
        + Autostart bool
        + StaleTimeout uint64
        + Limits ProcessConfigLimits

        - generateInputOutputIDs(ioconfig []ProcessConfigIO)

        + Marshal() *app.Config
        + Unmarshal(c *app.Config)

    }
    class ProcessConfigIO << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Options []string
        + Cleanup []ProcessConfigIOCleanup

    }
    class ProcessConfigIOCleanup << (S,Aquamarine) >> {
        + Pattern string
        + MaxFiles uint
        + MaxFileAge uint
        + PurgeOnDelete bool

    }
    class ProcessConfigLimits << (S,Aquamarine) >> {
        + CPU float64
        + Memory uint64
        + WaitFor uint64

    }
    class ProcessReport << (S,Aquamarine) >> {
        + History []ProcessReportHistoryEntry

        + Unmarshal(l *app.Log)

    }
    class ProcessReportHistoryEntry << (S,Aquamarine) >> {
        + CreatedAt int64
        + Prelude []string
        + Log [][]string

    }
    class ProcessState << (S,Aquamarine) >> {
        + Order string
        + State string
        + Runtime int64
        + Reconnect int64
        + LastLog string
        + Progress *Progress
        + Memory uint64
        + CPU json.Number
        + Command []string

        + Unmarshal(state *app.State)

    }
    class Progress << (S,Aquamarine) >> {
        + Input []ProgressIO
        + Output []ProgressIO
        + Frame uint64
        + Packet uint64
        + FPS json.Number
        + Quantizer json.Number
        + Size uint64
        + Time json.Number
        + Bitrate json.Number
        + Speed json.Number
        + Drop uint64
        + Dup uint64

        + Unmarshal(p *app.Progress)

    }
    class ProgressIO << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Index uint64
        + Stream uint64
        + Format string
        + Type string
        + Codec string
        + Coder string
        + Frame uint64
        + Keyframe uint64
        + Framerate ProgressIOFramerate
        + FPS json.Number
        + Packet uint64
        + PPS json.Number
        + Size uint64
        + Bitrate json.Number
        + Extradata uint64
        + Pixfmt string
        + Quantizer json.Number
        + Width uint64
        + Height uint64
        + Sampling uint64
        + Layout string
        + Channels uint64
        + AVstream *AVstream

        + Unmarshal(io *app.ProgressIO)

    }
    class ProgressIOFramerate << (S,Aquamarine) >> {
        + Min json.Number
        + Max json.Number
        + Average json.Number

    }
    class RTMPChannel << (S,Aquamarine) >> {
        + Name string

    }
    class RTMPHandler << (S,Aquamarine) >> {
        - rtmp rtmp.Server

        + ListChannels(c echo.Context) error

    }
    class RestreamHandler << (S,Aquamarine) >> {
        - restream restream.Restreamer

        - getProcess(id string, filterString string) (api.Process, error)

        + Add(c echo.Context) error
        + GetAll(c echo.Context) error
        + Get(c echo.Context) error
        + Delete(c echo.Context) error
        + Update(c echo.Context) error
        + Command(c echo.Context) error
        + GetConfig(c echo.Context) error
        + GetState(c echo.Context) error
        + GetReport(c echo.Context) error
        + Probe(c echo.Context) error
        + Skills(c echo.Context) error
        + ReloadSkills(c echo.Context) error
        + GetProcessMetadata(c echo.Context) error
        + SetProcessMetadata(c echo.Context) error
        + GetMetadata(c echo.Context) error
        + SetMetadata(c echo.Context) error

    }
    class SRTChannels << (S,Aquamarine) >> {
        + Publisher <font color=blue>map</font>[string]uint32
        + Subscriber <font color=blue>map</font>[string][]uint32
        + Connections <font color=blue>map</font>[uint32]SRTConnection
        + Log <font color=blue>map</font>[string][]SRTLog

        + Unmarshal(ss *srt.Channels)

    }
    class SRTConnection << (S,Aquamarine) >> {
        + Log <font color=blue>map</font>[string][]SRTLog
        + Stats SRTStatistics

        + Unmarshal(ss *srt.Connection)

    }
    class SRTHandler << (S,Aquamarine) >> {
        - srt srt.Server

        + ListChannels(c echo.Context) error

    }
    class SRTLog << (S,Aquamarine) >> {
        + Timestamp int64
        + Message []string

    }
    class SRTStatistics << (S,Aquamarine) >> {
        + MsTimeStamp uint64
        + PktSent uint64
        + PktRecv uint64
        + PktSentUnique uint64
        + PktRecvUnique uint64
        + PktSndLoss uint64
        + PktRcvLoss uint64
        + PktRetrans uint64
        + PktRcvRetrans uint64
        + PktSentACK uint64
        + PktRecvACK uint64
        + PktSentNAK uint64
        + PktRecvNAK uint64
        + PktSentKM uint64
        + PktRecvKM uint64
        + UsSndDuration uint64
        + PktSndDrop uint64
        + PktRcvDrop uint64
        + PktRcvUndecrypt uint64
        + ByteSent uint64
        + ByteRecv uint64
        + ByteSentUnique uint64
        + ByteRecvUnique uint64
        + ByteRcvLoss uint64
        + ByteRetrans uint64
        + ByteSndDrop uint64
        + ByteRcvDrop uint64
        + ByteRcvUndecrypt uint64
        + UsPktSndPeriod float64
        + PktFlowWindow uint64
        + PktFlightSize uint64
        + MsRTT float64
        + MbpsBandwidth float64
        + ByteAvailSndBuf uint64
        + ByteAvailRcvBuf uint64
        + MbpsMaxBW float64
        + ByteMSS uint64
        + PktSndBuf uint64
        + ByteSndBuf uint64
        + MsSndBuf uint64
        + MsSndTsbPdDelay uint64
        + PktRcvBuf uint64
        + ByteRcvBuf uint64
        + MsRcvBuf uint64
        + MsRcvTsbPdDelay uint64
        + PktReorderTolerance uint64
        + PktRcvAvgBelatedTime uint64

        + Unmarshal(ss *gosrt.Statistics)

    }
    class Session << (S,Aquamarine) >> {
        + ID string
        + Reference string
        + CreatedAt int64
        + Location string
        + Peer string
        + Extra string
        + RxBytes uint64
        + TxBytes uint64
        + RxBitrate json.Number
        + TxBitrate json.Number

        + Unmarshal(sess session.Session)

    }
    class SessionHandler << (S,Aquamarine) >> {
        - registry session.RegistryReader

        + Summary(c echo.Context) error
        + Active(c echo.Context) error

    }
    class SessionPeers << (S,Aquamarine) >> {
        + Locations <font color=blue>map</font>[string]SessionStats

    }
    class SessionStats << (S,Aquamarine) >> {
        + TotalSessions uint64
        + TotalRxBytes uint64
        + TotalTxBytes uint64

    }
    class SessionSummary << (S,Aquamarine) >> {
        + Active SessionSummaryActive
        + Summary SessionSummarySummary

        + Unmarshal(sum session.Summary)

    }
    class SessionSummaryActive << (S,Aquamarine) >> {
        + SessionList []Session
        + Sessions uint64
        + RxBitrate json.Number
        + TxBitrate json.Number
        + MaxSessions uint64
        + MaxRxBitrate json.Number
        + MaxTxBitrate json.Number

    }
    class SessionSummarySummary << (S,Aquamarine) >> {
        + Peers <font color=blue>map</font>[string]SessionPeers
        + Locations <font color=blue>map</font>[string]SessionStats
        + References <font color=blue>map</font>[string]SessionStats

    }
    class SetConfig << (S,Aquamarine) >> {
        + MergeTo(cfg *config.Config)

    }
    class SetConfigV1 << (S,Aquamarine) >> {
        + MergeTo(cfg *config.Config)

    }
    class SetConfigV2 << (S,Aquamarine) >> {
        + MergeTo(cfg *config.Config)

    }
    class Skills << (S,Aquamarine) >> {
        + FFmpeg <font color=blue>struct</font>{string, string, string, []SkillsLibrary}
        + Filters []SkillsFilter
        + HWAccels []SkillsHWAccel
        + Codecs <font color=blue>struct</font>{[]SkillsCodec, []SkillsCodec, []{packageName}SkillsCodec}
        + Devices <font color=blue>struct</font>{[]SkillsDevice, []SkillsDevice}
        + Formats <font color=blue>struct</font>{[]SkillsFormat, []SkillsFormat}
        + Protocols <font color=blue>struct</font>{[]SkillsProtocol, []SkillsProtocol}

        + Unmarshal(skills skills.Skills)

    }
    class SkillsCodec << (S,Aquamarine) >> {
        + ID string
        + Name string
        + Encoders []string
        + Decoders []string

        + Unmarshal(codec skills.Codec)

    }
    class SkillsDevice << (S,Aquamarine) >> {
        + ID string
        + Name string
        + Devices []SkillsHWDevice

        + Unmarshal(device skills.Device)

    }
    class SkillsFilter << (S,Aquamarine) >> {
        + ID string
        + Name string

        + Unmarshal(filter skills.Filter)

    }
    class SkillsFormat << (S,Aquamarine) >> {
        + ID string
        + Name string

        + Unmarshal(format skills.Format)

    }
    class SkillsHWAccel << (S,Aquamarine) >> {
        + ID string
        + Name string

        + Unmarshal(hwaccel skills.HWAccel)

    }
    class SkillsHWDevice << (S,Aquamarine) >> {
        + ID string
        + Name string
        + Extra string
        + Media string

        + Unmarshal(hwdevice skills.HWDevice)

    }
    class SkillsLibrary << (S,Aquamarine) >> {
        + Name string
        + Compiled string
        + Linked string

        + Unmarshal(lib skills.Library)

    }
    class SkillsProtocol << (S,Aquamarine) >> {
        + ID string
        + Name string

        + Unmarshal(proto skills.Protocol)

    }
    class Version << (S,Aquamarine) >> {
        + Number string
        + Commit string
        + Branch string
        + Build string
        + Arch string
        + Compiler string

    }
    class VersionMinimal << (S,Aquamarine) >> {
        + Number string

    }
    class WidgetConfig << (S,Aquamarine) >> {
        + Restream restream.Restreamer
        + Registry session.RegistryReader

    }
    class WidgetHandler << (S,Aquamarine) >> {
        - restream restream.Restreamer
        - registry session.RegistryReader

        + Get(c echo.Context) error

    }
    class WidgetProcess << (S,Aquamarine) >> {
        + CurrentSessions uint64
        + TotalSessions uint64
        + Uptime int64

    }
    class api << (S,Aquamarine) >> {
        - restream restream.Restreamer
        - ffmpeg ffmpeg.FFmpeg
        - diskfs fs.Filesystem
        - memfs fs.Filesystem
        - s3fs <font color=blue>map</font>[string]fs.Filesystem
        - rtmpserver rtmp.Server
        - srtserver srt.Server
        - metrics monitor.HistoryMonitor
        - prom prometheus.Metrics
        - service service.Service
        - sessions session.Registry
        - cache cache.Cacher
        - mainserver *http.Server
        - sidecarserver *http.Server
        - httpjwt jwt.JWT
        - update update.Checker
        - replacer replace.Replacer
        - errorChan <font color=blue>chan</font> error
        - gcTickerStop context.CancelFunc
        - log <font color=blue>struct</font>{io.Writer, log.BufferWriter, <font color=blue>struct</font>{log.Logger, log.Logger, log.Logger, log.Logger, log.Logger, log.Logger}}
        - config <font color=blue>struct</font>{string, store.Store, *config.Config}
        - lock sync.Mutex
        - wgStop sync.WaitGroup
        - state string
        - url string
        - token string
        - accessToken string
        - accessTokenType string
        - client *http.Client
        - logger log.Logger

        - start() error
        - stop()
        - callWithRetry(method string, path string, body io.Reader) ([]byte, error)
        - refreshAccessToken(refreshToken string) error
        - call(method string, path string, body io.Reader) ([]byte, error)

        + Reload() error
        + Start() error
        + Stop()
        + Destroy()
        + Monitor(id string, monitordata MonitorData) (MonitorResponse, error)

    }
    class api.ConfigError << (T, #FF7700) >>  {
    }
    class api.LogEvent << (T, #FF7700) >>  {
    }
    class api.SessionsActive << (T, #FF7700) >>  {
    }
    class api.SessionsSummary << (T, #FF7700) >>  {
    }
    class copyReader << (S,Aquamarine) >> {
        - reader io.Reader
        - copy *bytes.Buffer

        + Read(p []byte) (int, error)

    }
    class statusError << (S,Aquamarine) >> {
        - code int
        - response []byte

        + Error() string
        + Is(target error) bool

    }
    class tokenResponse << (S,Aquamarine) >> {
        + AccessToken string
        + TokenType string

    }
}
"config.Data" *-- "api.ConfigData"
"api.ProcessReportHistoryEntry" *-- "api.ProcessReport"
"api.SessionStats" *-- "api.SessionPeers"
"api.SessionStats" *-- "api.SessionSummarySummary"
"config.Data" *-- "api.SetConfig"
"v1.Data" *-- "api.SetConfigV1"
"v2.Data" *-- "api.SetConfigV2"

"api.API" <|-- "api.api"

namespace app {
    class AVstream << (S,Aquamarine) >> {
        + Input AVstreamIO
        + Output AVstreamIO
        + Aqueue uint64
        + Queue uint64
        + Dup uint64
        + Drop uint64
        + Enc uint64
        + Looping bool
        + LoopingRuntime uint64
        + Duplicating bool
        + GOP string

    }
    class AVstreamIO << (S,Aquamarine) >> {
        + State string
        + Packet uint64
        + Time uint64
        + Size uint64

    }
    class Config << (S,Aquamarine) >> {
        + ID string
        + Reference string
        + FFVersion string
        + Input []ConfigIO
        + Output []ConfigIO
        + Options []string
        + Reconnect bool
        + ReconnectDelay uint64
        + Autostart bool
        + StaleTimeout uint64
        + LimitCPU float64
        + LimitMemory uint64
        + LimitWaitFor uint64

        + Clone() *Config
        + CreateCommand() []string

    }
    class ConfigIO << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Options []string
        + Cleanup []ConfigIOCleanup

        + Clone() ConfigIO

    }
    class ConfigIOCleanup << (S,Aquamarine) >> {
        + Pattern string
        + MaxFiles uint
        + MaxFileAge uint
        + PurgeOnDelete bool

    }
    class Log << (S,Aquamarine) >> {
        + History []LogHistoryEntry

    }
    class LogEntry << (S,Aquamarine) >> {
        + Timestamp time.Time
        + Data string

    }
    class LogHistoryEntry << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + Prelude []string
        + Log []LogEntry

    }
    class Probe << (S,Aquamarine) >> {
        + Streams []ProbeIO
        + Log []string

    }
    class ProbeIO << (S,Aquamarine) >> {
        + Address string
        + Index uint64
        + Stream uint64
        + Language string
        + Format string
        + Type string
        + Codec string
        + Coder string
        + Bitrate float64
        + Duration float64
        + Pixfmt string
        + Width uint64
        + Height uint64
        + FPS float64
        + Sampling uint64
        + Layout string
        + Channels uint64

    }
    class Process << (S,Aquamarine) >> {
        + ID string
        + Reference string
        + Config *Config
        + CreatedAt int64
        + UpdatedAt int64
        + Order string

        + Clone() *Process

    }
    class ProcessStates << (S,Aquamarine) >> {
        + Finished uint64
        + Starting uint64
        + Running uint64
        + Finishing uint64
        + Failed uint64
        + Killed uint64

        + Marshal(s process.States)

    }
    class Progress << (S,Aquamarine) >> {
        + Input []ProgressIO
        + Output []ProgressIO
        + Frame uint64
        + Packet uint64
        + FPS float64
        + PPS float64
        + Quantizer float64
        + Size uint64
        + Time float64
        + Bitrate float64
        + Speed float64
        + Drop uint64
        + Dup uint64

    }
    class ProgressIO << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Index uint64
        + Stream uint64
        + Format string
        + Type string
        + Codec string
        + Coder string
        + Frame uint64
        + Keyframe uint64
        + Framerate <font color=blue>struct</font>{float64, float64, float64}
        + FPS float64
        + Packet uint64
        + PPS float64
        + Size uint64
        + Bitrate float64
        + Extradata uint64
        + Pixfmt string
        + Quantizer float64
        + Width uint64
        + Height uint64
        + Sampling uint64
        + Layout string
        + Channels uint64
        + AVstream *AVstream

    }
    class State << (S,Aquamarine) >> {
        + Order string
        + State string
        + States ProcessStates
        + Time int64
        + Duration float64
        + Reconnect float64
        + LastLog string
        + Progress Progress
        + Memory uint64
        + CPU float64
        + Command []string

    }
    class versionInfo << (S,Aquamarine) >> {
        + Major int
        + Minor int
        + Patch int

        + String() string
        + MajorString() string
        + MinorString() string

    }
}
"app.LogHistoryEntry" *-- "app.Log"


namespace cache {
    interface Cacher  {
        + Get(key string) (<font color=blue>interface</font>{}, time.Duration, error)
        + Put(key string, o <font color=blue>interface</font>{}, size uint64) error
        + Delete(key string) error
        + Purge()
        + TTL() time.Duration
        + IsExtensionCacheable(extension string) bool
        + IsSizeCacheable(size uint64) bool

    }
    class Config << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + Cache cache.Cacher
        + Headers []string
        + Prefix string

    }
    class LRUConfig << (S,Aquamarine) >> {
        + TTL time.Duration
        + MaxSize uint64
        + MaxFileSize uint64
        + AllowExtensions []string
        + BlockExtensions []string
        + Logger log.Logger

    }
    class cacheObject << (S,Aquamarine) >> {
        - status int
        - body []byte
        - header http.Header

    }
    class cacheWriter << (S,Aquamarine) >> {
        - code int
        - header http.Header
        - body bytes.Buffer

        + Header() http.Header
        + WriteHeader(code int)
        + Write(body []byte) (int, error)

    }
    class lrucache << (S,Aquamarine) >> {
        - ttl time.Duration
        - maxSize uint64
        - maxFileSize uint64
        - allowExtensions []string
        - blockExtensions []string
        - objects <font color=blue>map</font>[string]*list.Element
        - list *list.List
        - size uint64
        - lock sync.Mutex
        - logger log.Logger

        - createValue(key string, o <font color=blue>interface</font>{}, expireAt time.Time, size uint64) *value
        - removeElement(elm *list.Element)

        + Get(key string) (<font color=blue>interface</font>{}, time.Duration, error)
        + Put(key string, o <font color=blue>interface</font>{}, size uint64) error
        + Delete(key string) error
        + Purge()
        + TTL() time.Duration
        + IsExtensionCacheable(extension string) bool
        + IsSizeCacheable(size uint64) bool

    }
    class value << (S,Aquamarine) >> {
        - key string
        - obj <font color=blue>interface</font>{}
        - expireAt time.Time
        - size uint64

    }
}

"cache.Cacher" <|-- "cache.lrucache"

namespace config {
    class Config << (S,Aquamarine) >> {
        - fs fs.Filesystem
        - vars vars.Variables

        - init()

        + Get(name string) (string, error)
        + Set(name string, val string) error
        + Clone() *Config
        + Validate(resetLogs bool)
        + Merge()
        + Messages(logger <font color=blue>func</font>(string, vars.Variable, string) )
        + HasErrors() bool
        + Overrides() []string

    }
    class Data << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + LoadedAt time.Time
        + UpdatedAt time.Time
        + Version int64
        + ID string
        + Name string
        + Address string
        + CheckForUpdates bool
        + Log <font color=blue>struct</font>{string, []string, int}
        + DB <font color=blue>struct</font>{string}
        + Host <font color=blue>struct</font>{[]string, bool}
        + API <font color=blue>struct</font>{bool, <font color=blue>struct</font>{<font color=blue>struct</font>{[]string, []string}, <font color=blue>struct</font>{[]string, []string}}, <font color=blue>struct</font>{bool, bool, string, string, <font color=blue>struct</font>{string}, <font color=blue>struct</font>{bool, []value.Auth0Tenant}}}
        + TLS <font color=blue>struct</font>{string, bool, bool, string, string, string}
        + Storage <font color=blue>struct</font>{<font color=blue>struct</font>{string, int64, <font color=blue>struct</font>{bool, uint64, int64, uint64, <font color=blue>struct</font>{[]string, []string}}}, <font color=blue>struct</font>{<font color=blue>struct</font>{bool, string, string}, int64, bool}, []value.S3Storage, <font color=blue>struct</font>{[]string}, string}
        + RTMP <font color=blue>struct</font>{bool, bool, string, string, string, string}
        + SRT <font color=blue>struct</font>{bool, string, string, string, <font color=blue>struct</font>{bool, []string}}
        + FFmpeg <font color=blue>struct</font>{string, int64, <font color=blue>struct</font>{<font color=blue>struct</font>{[]string, []string}, <font color=blue>struct</font>{[]string, []string}}, <font color=blue>struct</font>{int, int}}
        + Playout <font color=blue>struct</font>{bool, int, int}
        + Debug <font color=blue>struct</font>{bool, int, int64}
        + Metrics <font color=blue>struct</font>{bool, bool, int64, int64}
        + Sessions <font color=blue>struct</font>{bool, []string, int, bool, int, uint64, uint64}
        + Service <font color=blue>struct</font>{bool, string, string}
        + Router <font color=blue>struct</font>{[]string, <font color=blue>map</font>[string]string, string}

    }
}
"config.Data" *-- "config.Config"


namespace cors {
    class Config << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + Prefixes <font color=blue>map</font>[string][]string

    }
}


namespace ffmpeg {
    class Config << (S,Aquamarine) >> {
        + Binary string
        + MaxProc int64
        + MaxLogLines int
        + LogHistoryLength int
        + ValidatorInput Validator
        + ValidatorOutput Validator
        + Portrange net.Portranger
        + Collector session.Collector

    }
    interface FFmpeg  {
        + New(config ProcessConfig) (process.Process, error)
        + NewProcessParser(logger log.Logger, id string, reference string) parse.Parser
        + NewProbeParser(logger log.Logger) probe.Parser
        + ValidateInputAddress(address string) bool
        + ValidateOutputAddress(address string) bool
        + Skills() skills.Skills
        + ReloadSkills() error
        + GetPort() (int, error)
        + PutPort(port int)
        + States() process.States

    }
    class ProcessConfig << (S,Aquamarine) >> {
        + Reconnect bool
        + ReconnectDelay time.Duration
        + StaleTimeout time.Duration
        + LimitCPU float64
        + LimitMemory uint64
        + LimitDuration time.Duration
        + Command []string
        + Parser process.Parser
        + Logger log.Logger
        + OnExit <font color=blue>func</font>()
        + OnStart <font color=blue>func</font>()
        + OnStateChange <font color=blue>func</font>(string, string)

    }
    interface Validator  {
        + IsValid(text string) bool

    }
    class ffmpeg << (S,Aquamarine) >> {
        - binary string
        - validatorIn Validator
        - validatorOut Validator
        - portrange net.Portranger
        - skills skills.Skills
        - logLines int
        - historyLength int
        - collector session.Collector
        - states process.States
        - statesLock sync.RWMutex

        + New(config ProcessConfig) (process.Process, error)
        + NewProcessParser(logger log.Logger, id string, reference string) parse.Parser
        + NewProbeParser(logger log.Logger) probe.Parser
        + ValidateInputAddress(address string) bool
        + ValidateOutputAddress(address string) bool
        + Skills() skills.Skills
        + ReloadSkills() error
        + GetPort() (int, error)
        + PutPort(port int)
        + States() process.States

    }
    class validator << (S,Aquamarine) >> {
        - allow []*regexp.Regexp
        - block []*regexp.Regexp

        + IsValid(text string) bool

    }
    class wrappedCollector << (S,Aquamarine) >> {
        - prefix string
        - reference string

        + Register(id string, reference string, location string, peer string)
        + Activate(id string) bool
        + RegisterAndActivate(id string, reference string, location string, peer string)
        + Extra(id string, extra string)
        + Unregister(id string)
        + Ingress(id string, size int64)
        + Egress(id string, size int64)
        + IsKnownSession(id string) bool
        + SessionTopIngressBitrate(id string) float64
        + SessionTopEgressBitrate(id string) float64
        + SessionSetTopIngressBitrate(id string, bitrate float64)
        + SessionSetTopEgressBitrate(id string, bitrate float64)

    }
}
"session.Collector" *-- "ffmpeg.wrappedCollector"

"ffmpeg.FFmpeg" <|-- "ffmpeg.ffmpeg"
"ffmpeg.Validator" <|-- "ffmpeg.validator"

namespace fs {
    class Config << (S,Aquamarine) >> {
        + FS fs.Filesystem
        + Logger log.Logger

    }
    class DiskConfig << (S,Aquamarine) >> {
        + Logger log.Logger

    }
    class FS << (S,Aquamarine) >> {
        + Name string
        + Mountpoint string
        + AllowWrite bool
        + EnableAuth bool
        + Username string
        + Password string
        + DefaultFile string
        + DefaultContentType string
        + Gzip bool
        + Filesystem fs.Filesystem
        + Cache cache.Cacher

    }
    interface File  {
        + Name() string
        + Stat() (FileInfo, error)

    }
    interface FileInfo  {
        + Name() string
        + Size() int64
        + Mode() fs.FileMode
        + ModTime() time.Time
        + IsLink() (string, bool)
        + IsDir() bool

    }
    interface Filesystem  {
        + Name() string
        + Type() string
        + Metadata(key string) string
        + SetMetadata(key string, data string)
        + SetCleanup(id string, patterns []Pattern)
        + UnsetCleanup(id string)
        + Start()
        + Stop()

    }
    class MemConfig << (S,Aquamarine) >> {
        + Logger log.Logger

    }
    class Pattern << (S,Aquamarine) >> {
        + Pattern string
        + MaxFiles uint
        + MaxFileAge time.Duration
        + PurgeOnDelete bool

    }
    interface PurgeFilesystem  {
        + Purge(size int64) int64

    }
    interface ReadFilesystem  {
        + Size() (int64, int64)
        + Files() int64
        + Open(path string) File
        + ReadFile(path string) ([]byte, error)
        + Stat(path string) (FileInfo, error)
        + List(path string, pattern string) []FileInfo
        + LookPath(file string) (string, error)

    }
    class RootedDiskConfig << (S,Aquamarine) >> {
        + Root string
        + Logger log.Logger

    }
    class S3Config << (S,Aquamarine) >> {
        + Name string
        + Endpoint string
        + AccessKeyID string
        + SecretAccessKey string
        + Region string
        + Bucket string
        + UseSSL bool
        + Logger log.Logger

    }
    interface SizedFilesystem  {
        + Resize(size int64, purge bool) error

    }
    interface WriteFilesystem  {
        + Symlink(oldname string, newname string) error
        + WriteFileReader(path string, r io.Reader) (int64, bool, error)
        + WriteFile(path string, data []byte) (int64, bool, error)
        + WriteFileSafe(path string, data []byte) (int64, bool, error)
        + MkdirAll(path string, perm os.FileMode) error
        + Rename(src string, dst string) error
        + Copy(src string, dst string) error
        + Remove(path string) int64
        + RemoveAll() int64

    }
    class diskFile << (S,Aquamarine) >> {
        - root string
        - name string
        - mode os.FileMode
        - file *os.File

        + Name() string
        + Stat() (FileInfo, error)
        + Close() error
        + Read(p []byte) (int, error)

    }
    class diskFileInfo << (S,Aquamarine) >> {
        - root string
        - name string
        - mode os.FileMode
        - finfo os.FileInfo

        + Name() string
        + Size() int64
        + Mode() fs.FileMode
        + ModTime() time.Time
        + IsLink() (string, bool)
        + IsDir() bool

    }
    class diskFilesystem << (S,Aquamarine) >> {
        - metadata <font color=blue>map</font>[string]string
        - lock sync.RWMutex
        - root string
        - cwd string
        - currentSize int64
        - lastSizeCheck time.Time
        - logger log.Logger

        - rename(src string, dst string) error
        - copy(src string, dst string) error
        - findExecutable(file string) error
        - walk(path string, walkfn <font color=blue>func</font>(string, os.FileInfo) )
        - cleanPath(path string) string

        + Name() string
        + Type() string
        + Metadata(key string) string
        + SetMetadata(key string, data string)
        + Size() (int64, int64)
        + Purge(size int64) int64
        + Files() int64
        + Symlink(oldname string, newname string) error
        + Open(path string) File
        + ReadFile(path string) ([]byte, error)
        + WriteFileReader(path string, r io.Reader) (int64, bool, error)
        + WriteFile(path string, data []byte) (int64, bool, error)
        + WriteFileSafe(path string, data []byte) (int64, bool, error)
        + Rename(src string, dst string) error
        + Copy(src string, dst string) error
        + MkdirAll(path string, perm os.FileMode) error
        + Stat(path string) (FileInfo, error)
        + Remove(path string) int64
        + RemoveAll() int64
        + List(path string, pattern string) []FileInfo
        + LookPath(file string) (string, error)

    }
    class filesystem << (S,Aquamarine) >> {
        - cleanupPatterns <font color=blue>map</font>[string][]Pattern
        - cleanupLock sync.RWMutex
        - stopTicker context.CancelFunc
        - startOnce sync.Once
        - stopOnce sync.Once
        - logger log.Logger

        - cleanup()
        - purge(patterns []Pattern) uint64
        - cleanupTicker(ctx context.Context, interval time.Duration)

        + Start()
        + Stop()
        + SetCleanup(id string, patterns []Pattern)
        + UnsetCleanup(id string)

    }
    class memFile << (S,Aquamarine) >> {
        - data *bytes.Buffer

        + Name() string
        + Stat() (FileInfo, error)
        + Read(p []byte) (int, error)
        + Close() error

    }
    class memFileInfo << (S,Aquamarine) >> {
        - name string
        - size int64
        - dir bool
        - lastMod time.Time
        - linkTo string

        + Name() string
        + Size() int64
        + Mode() fs.FileMode
        + ModTime() time.Time
        + IsLink() (string, bool)
        + IsDir() bool

    }
    class memFilesystem << (S,Aquamarine) >> {
        - metadata <font color=blue>map</font>[string]string
        - metaLock sync.RWMutex
        - files *memStorage
        - currentSize int64
        - sizeLock sync.RWMutex
        - logger log.Logger

        - stat(path string) (FileInfo, error)
        - isDir(path string) bool
        - cleanPath(path string) string

        + Name() string
        + Type() string
        + Metadata(key string) string
        + SetMetadata(key string, data string)
        + Size() (int64, int64)
        + Files() int64
        + Open(path string) File
        + ReadFile(path string) ([]byte, error)
        + Symlink(oldname string, newname string) error
        + WriteFileReader(path string, r io.Reader) (int64, bool, error)
        + WriteFile(path string, data []byte) (int64, bool, error)
        + WriteFileSafe(path string, data []byte) (int64, bool, error)
        + Purge(size int64) int64
        + MkdirAll(path string, perm os.FileMode) error
        + Rename(src string, dst string) error
        + Copy(src string, dst string) error
        + Stat(path string) (FileInfo, error)
        + Remove(path string) int64
        + RemoveAll() int64
        + List(path string, pattern string) []FileInfo
        + LookPath(file string) (string, error)

    }
    class memStorage << (S,Aquamarine) >> {
        - lock *xsync.RBMutex
        - files *

        + Delete(key string) (*memFile, bool)
        + Store(key string, value *memFile) (*memFile, bool)
        + Load(key string) (*memFile, bool)
        + LoadAndCopy(key string) (*memFile, bool)
        + Has(key string) bool
        + Range(f <font color=blue>func</font>(string, *memFile) bool)

    }
    class readOnlyFilesystem << (S,Aquamarine) >> {
        + Symlink(oldname string, newname string) error
        + WriteFileReader(path string, rd io.Reader) (int64, bool, error)
        + WriteFile(path string, data []byte) (int64, bool, error)
        + WriteFileSafe(path string, data []byte) (int64, bool, error)
        + MkdirAll(path string, perm os.FileMode) error
        + Remove(path string) int64
        + RemoveAll() int64
        + Purge(size int64) int64
        + Resize(size int64, purge bool) error

    }
    class s3File << (S,Aquamarine) >> {
        - data io.ReadCloser
        - name string
        - size int64
        - lastModified time.Time

        + Read(p []byte) (int, error)
        + Close() error
        + Name() string
        + Stat() (FileInfo, error)

    }
    class s3FileInfo << (S,Aquamarine) >> {
        - name string
        - size int64
        - dir bool
        - lastModified time.Time

        + Name() string
        + Size() int64
        + Mode() os.FileMode
        + ModTime() time.Time
        + IsLink() (string, bool)
        + IsDir() bool

    }
    class s3Filesystem << (S,Aquamarine) >> {
        - metadata <font color=blue>map</font>[string]string
        - metaLock sync.RWMutex
        - name string
        - endpoint string
        - accessKeyID string
        - secretAccessKey string
        - region string
        - bucket string
        - useSSL bool
        - client *minio.Client
        - logger log.Logger

        - write(path string, r io.Reader) (int64, bool, error)
        - isDir(path string) bool
        - cleanPath(path string) string

        + Name() string
        + Type() string
        + Metadata(key string) string
        + SetMetadata(key string, data string)
        + Size() (int64, int64)
        + Files() int64
        + Symlink(oldname string, newname string) error
        + Stat(path string) (FileInfo, error)
        + Open(path string) File
        + ReadFile(path string) ([]byte, error)
        + WriteFileReader(path string, r io.Reader) (int64, bool, error)
        + WriteFile(path string, data []byte) (int64, bool, error)
        + WriteFileSafe(path string, data []byte) (int64, bool, error)
        + Rename(src string, dst string) error
        + Copy(src string, dst string) error
        + MkdirAll(path string, perm os.FileMode) error
        + Remove(path string) int64
        + RemoveAll() int64
        + List(path string, pattern string) []FileInfo
        + LookPath(file string) (string, error)

    }
    class sizedFilesystem << (S,Aquamarine) >> {
        - maxSize int64
        - purge bool

        + Size() (int64, int64)
        + Resize(size int64, purge bool) error
        + WriteFileReader(path string, rd io.Reader) (int64, bool, error)
        + WriteFile(path string, data []byte) (int64, bool, error)
        + WriteFileSafe(path string, data []byte) (int64, bool, error)
        + Purge(size int64) int64

    }
}
"fs.ReadFilesystem" *-- "fs.Filesystem"
"fs.WriteFilesystem" *-- "fs.Filesystem"
"fs.Filesystem" *-- "fs.SizedFilesystem"
"fs.Filesystem" *-- "fs.filesystem"
"fs.memFileInfo" *-- "fs.memFile"
"fs.Filesystem" *-- "fs.readOnlyFilesystem"
"fs.Filesystem" *-- "fs.sizedFilesystem"

"fs.File" <|-- "fs.diskFile"
"fs.FileInfo" <|-- "fs.diskFileInfo"
"fs.PurgeFilesystem" <|-- "fs.diskFilesystem"
"fs.ReadFilesystem" <|-- "fs.diskFilesystem"
"fs.WriteFilesystem" <|-- "fs.diskFilesystem"
"service.Service" <|-- "fs.filesystem"
"update.Checker" <|-- "fs.filesystem"
"fs.File" <|-- "fs.memFile"
"fs.FileInfo" <|-- "fs.memFileInfo"
"fs.PurgeFilesystem" <|-- "fs.memFilesystem"
"fs.ReadFilesystem" <|-- "fs.memFilesystem"
"fs.WriteFilesystem" <|-- "fs.memFilesystem"
"fs.PurgeFilesystem" <|-- "fs.readOnlyFilesystem"
"fs.SizedFilesystem" <|-- "fs.readOnlyFilesystem"
"fs.File" <|-- "fs.s3File"
"fs.ReadFilesystem" <|-- "fs.s3Filesystem"
"fs.WriteFilesystem" <|-- "fs.s3Filesystem"
"fs.PurgeFilesystem" <|-- "fs.sizedFilesystem"
"fs.SizedFilesystem" <|-- "fs.sizedFilesystem"

namespace glob {
    interface Glob  {
        + Match(name string) bool

    }
    class globber << (S,Aquamarine) >> {
        - glob glob.Glob

        + Match(name string) bool

    }
}

"glob.Glob" <|-- "glob.globber"

namespace graph {
    class ComplexityRoot << (S,Aquamarine) >> {
        + AVStream <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + AVStreamIO <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + About <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + AboutVersion <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + Metric <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + Metrics <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + Mutation <font color=blue>struct</font>{<font color=blue>func</font>(int) int}
        + Probe <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProbeIO <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + Process <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProcessConfig <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProcessConfigIO <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProcessConfigLimits <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProcessReport <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProcessReportHistoryEntry <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProcessReportLogEntry <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProcessState <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + Progress <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + ProgressIO <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + Query <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int, models.MetricsInput) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int, string, string) int, <font color=blue>func</font>(int, string) int, <font color=blue>func</font>(int, string) int, <font color=blue>func</font>(int) int}
        + RawAVstream <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + RawAVstreamIO <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}
        + RawAVstreamSwap <font color=blue>struct</font>{<font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int, <font color=blue>func</font>(int) int}

    }
    class Config << (S,Aquamarine) >> {
        + Resolvers ResolverRoot
        + Directives DirectiveRoot
        + Complexity ComplexityRoot

    }
    class DirectiveRoot << (S,Aquamarine) >> {
    }
    interface MutationResolver  {
        + Ping(ctx context.Context) (string, error)

    }
    interface QueryResolver  {
        + Ping(ctx context.Context) (string, error)
        + About(ctx context.Context) (*models.About, error)
        + Log(ctx context.Context) ([]string, error)
        + Metrics(ctx context.Context, query models.MetricsInput) (*models.Metrics, error)
        + PlayoutStatus(ctx context.Context, id string, input string) (*models.RawAVstream, error)
        + Processes(ctx context.Context) ([]*models.Process, error)
        + Process(ctx context.Context, id string) (*models.Process, error)
        + Probe(ctx context.Context, id string) (*models.Probe, error)

    }
    interface ResolverRoot  {
        + Mutation() MutationResolver
        + Query() QueryResolver

    }
    class executableSchema << (S,Aquamarine) >> {
        - resolvers ResolverRoot
        - directives DirectiveRoot
        - complexity ComplexityRoot

        + Schema() *ast.Schema
        + Complexity(typeName string, field string, childComplexity int, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (int, bool)
        + Exec(ctx context.Context) graphql.ResponseHandler

    }
    class executionContext << (S,Aquamarine) >> {
        - deferred int32
        - pendingDeferred int32
        - deferredResults <font color=blue>chan</font> graphql.DeferredResult

        - processDeferredGroup(dg graphql.DeferredGroup)
        - introspectSchema() (*introspection.Schema, error)
        - introspectType(name string) (*introspection.Type, error)
        - field_Query___type_args(ctx context.Context, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - field_Query_metrics_args(ctx context.Context, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - field_Query_playoutStatus_args(ctx context.Context, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - field_Query_probe_args(ctx context.Context, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - field_Query_process_args(ctx context.Context, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - field___Type_enumValues_args(ctx context.Context, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - field___Type_fields_args(ctx context.Context, rawArgs <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - fieldContext_AVStream_input(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_output(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_aqueue(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_queue(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_dup(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_drop(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_enc(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_looping(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_duplicating(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStream_gop(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStreamIO_state(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStreamIO_packet(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStreamIO_time(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AVStreamIO_size_kb(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_About_app(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_About_id(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_About_name(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_About_created_at(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_About_uptime_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_About_version(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AboutVersion_number(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AboutVersion_repository_commit(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AboutVersion_repository_branch(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AboutVersion_build_date(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AboutVersion_arch(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_AboutVersion_compiler(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Metric_name(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Metric_labels(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Metric_values(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Metrics_timerange_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Metrics_interval_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Metrics_metrics(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Mutation_ping(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Probe_streams(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Probe_log(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_url(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_index(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_stream(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_language(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_type(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_codec(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_coder(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_bitrate_kbps(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_duration_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_fps(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_pix_fmt(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_width(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_height(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_sampling(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_layout(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProbeIO_channels(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_id(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_type(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_reference(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_created_at(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_config(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_state(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_report(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Process_metadata(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_id(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_type(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_reference(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_input(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_output(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_options(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_reconnect(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_reconnect_delay_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_autostart(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_stale_timeout_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfig_limits(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfigIO_id(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfigIO_address(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfigIO_options(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfigLimits_cpu_usage(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfigLimits_memory_bytes(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessConfigLimits_waitfor_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReport_created_at(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReport_prelude(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReport_log(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReport_history(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReportHistoryEntry_created_at(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReportHistoryEntry_prelude(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReportHistoryEntry_log(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReportLogEntry_timestamp(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessReportLogEntry_data(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_order(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_state(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_runtime_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_reconnect_seconds(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_last_logline(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_progress(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_memory_bytes(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_cpu_usage(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProcessState_command(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_input(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_output(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_frame(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_packet(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_fps(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_q(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_size_kb(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_time(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_bitrate_kbit(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_speed(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_drop(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Progress_dup(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_id(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_address(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_index(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_stream(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_format(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_type(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_codec(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_coder(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_frame(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_fps(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_packet(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_pps(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_size_kb(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_bitrate_kbit(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_pixfmt(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_q(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_width(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_height(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_sampling(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_layout(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_channels(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_ProgressIO_avstream(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_ping(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_about(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_log(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_metrics(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_playoutStatus(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_processes(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_process(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query_probe(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_id(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_url(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_stream(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_queue(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_aqueue(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_dup(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_drop(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_enc(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_looping(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_duplicating(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_gop(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_debug(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_input(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_output(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstream_swap(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamIO_state(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamIO_packet(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamIO_time(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamIO_size_kb(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamSwap_url(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamSwap_status(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamSwap_lasturl(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext_RawAVstreamSwap_lasterror(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error)
        - unmarshalInputMetricInput(ctx context.Context, obj <font color=blue>interface</font>{}) (models.MetricInput, error)
        - unmarshalInputMetricsInput(ctx context.Context, obj <font color=blue>interface</font>{}) (models.MetricsInput, error)
        - marshalNAVStreamIO2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐAVStreamIo(ctx context.Context, sel ast.SelectionSet, v *models.AVStreamIo) graphql.Marshaler
        - marshalNAboutVersion2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐAboutVersion(ctx context.Context, sel ast.SelectionSet, v *models.AboutVersion) graphql.Marshaler
        - unmarshalNBoolean2bool(ctx context.Context, v <font color=blue>interface</font>{}) (bool, error)
        - marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler
        - unmarshalNFloat2float64(ctx context.Context, v <font color=blue>interface</font>{}) (float64, error)
        - marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler
        - unmarshalNID2string(ctx context.Context, v <font color=blue>interface</font>{}) (string, error)
        - marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler
        - unmarshalNInt2int(ctx context.Context, v <font color=blue>interface</font>{}) (int, error)
        - marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler
        - marshalNMetric2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐMetricᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Metric) graphql.Marshaler
        - marshalNMetric2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐMetric(ctx context.Context, sel ast.SelectionSet, v *models.Metric) graphql.Marshaler
        - unmarshalNMetricInput2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐMetricInputᚄ(ctx context.Context, v <font color=blue>interface</font>{}) ([]*models.MetricInput, error)
        - unmarshalNMetricInput2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐMetricInput(ctx context.Context, v <font color=blue>interface</font>{}) (*models.MetricInput, error)
        - marshalNMetrics2githubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐMetrics(ctx context.Context, sel ast.SelectionSet, v models.Metrics) graphql.Marshaler
        - marshalNMetrics2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐMetrics(ctx context.Context, sel ast.SelectionSet, v *models.Metrics) graphql.Marshaler
        - unmarshalNMetricsInput2githubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐMetricsInput(ctx context.Context, v <font color=blue>interface</font>{}) (models.MetricsInput, error)
        - unmarshalNMetricsResponseValue2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋscalarsᚐMetricsResponseValueᚄ(ctx context.Context, v <font color=blue>interface</font>{}) ([]*scalars.MetricsResponseValue, error)
        - marshalNMetricsResponseValue2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋscalarsᚐMetricsResponseValueᚄ(ctx context.Context, sel ast.SelectionSet, v []*scalars.MetricsResponseValue) graphql.Marshaler
        - unmarshalNMetricsResponseValue2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋscalarsᚐMetricsResponseValue(ctx context.Context, v <font color=blue>interface</font>{}) (*scalars.MetricsResponseValue, error)
        - marshalNMetricsResponseValue2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋscalarsᚐMetricsResponseValue(ctx context.Context, sel ast.SelectionSet, v *scalars.MetricsResponseValue) graphql.Marshaler
        - marshalNProbe2githubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProbe(ctx context.Context, sel ast.SelectionSet, v models.Probe) graphql.Marshaler
        - marshalNProbe2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProbe(ctx context.Context, sel ast.SelectionSet, v *models.Probe) graphql.Marshaler
        - marshalNProbeIO2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProbeIoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ProbeIo) graphql.Marshaler
        - marshalNProbeIO2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProbeIo(ctx context.Context, sel ast.SelectionSet, v *models.ProbeIo) graphql.Marshaler
        - marshalNProcess2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Process) graphql.Marshaler
        - marshalNProcess2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcess(ctx context.Context, sel ast.SelectionSet, v *models.Process) graphql.Marshaler
        - marshalNProcessConfig2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessConfig(ctx context.Context, sel ast.SelectionSet, v *models.ProcessConfig) graphql.Marshaler
        - marshalNProcessConfigIO2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessConfigIoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ProcessConfigIo) graphql.Marshaler
        - marshalNProcessConfigIO2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessConfigIo(ctx context.Context, sel ast.SelectionSet, v *models.ProcessConfigIo) graphql.Marshaler
        - marshalNProcessConfigLimits2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessConfigLimits(ctx context.Context, sel ast.SelectionSet, v *models.ProcessConfigLimits) graphql.Marshaler
        - marshalNProcessReport2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessReport(ctx context.Context, sel ast.SelectionSet, v *models.ProcessReport) graphql.Marshaler
        - marshalNProcessReportHistoryEntry2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessReportHistoryEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ProcessReportHistoryEntry) graphql.Marshaler
        - marshalNProcessReportHistoryEntry2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessReportHistoryEntry(ctx context.Context, sel ast.SelectionSet, v *models.ProcessReportHistoryEntry) graphql.Marshaler
        - marshalNProcessReportLogEntry2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessReportLogEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ProcessReportLogEntry) graphql.Marshaler
        - marshalNProcessReportLogEntry2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessReportLogEntry(ctx context.Context, sel ast.SelectionSet, v *models.ProcessReportLogEntry) graphql.Marshaler
        - marshalNProcessState2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcessState(ctx context.Context, sel ast.SelectionSet, v *models.ProcessState) graphql.Marshaler
        - marshalNProgress2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProgress(ctx context.Context, sel ast.SelectionSet, v *models.Progress) graphql.Marshaler
        - marshalNProgressIO2ᚕᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProgressIoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ProgressIo) graphql.Marshaler
        - marshalNProgressIO2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProgressIo(ctx context.Context, sel ast.SelectionSet, v *models.ProgressIo) graphql.Marshaler
        - marshalNRawAVstreamIO2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐRawAVstreamIo(ctx context.Context, sel ast.SelectionSet, v *models.RawAVstreamIo) graphql.Marshaler
        - marshalNRawAVstreamSwap2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐRawAVstreamSwap(ctx context.Context, sel ast.SelectionSet, v *models.RawAVstreamSwap) graphql.Marshaler
        - unmarshalNState2githubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐState(ctx context.Context, v <font color=blue>interface</font>{}) (models.State, error)
        - marshalNState2githubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐState(ctx context.Context, sel ast.SelectionSet, v models.State) graphql.Marshaler
        - unmarshalNString2string(ctx context.Context, v <font color=blue>interface</font>{}) (string, error)
        - marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler
        - unmarshalNString2ᚕstringᚄ(ctx context.Context, v <font color=blue>interface</font>{}) ([]string, error)
        - marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler
        - unmarshalNTime2timeᚐTime(ctx context.Context, v <font color=blue>interface</font>{}) (time.Time, error)
        - marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler
        - unmarshalNUint642githubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋscalarsᚐUint64(ctx context.Context, v <font color=blue>interface</font>{}) (scalars.Uint64, error)
        - marshalNUint642githubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋscalarsᚐUint64(ctx context.Context, sel ast.SelectionSet, v scalars.Uint64) graphql.Marshaler
        - marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler
        - marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler
        - unmarshalN__DirectiveLocation2string(ctx context.Context, v <font color=blue>interface</font>{}) (string, error)
        - marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler
        - unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v <font color=blue>interface</font>{}) ([]string, error)
        - marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler
        - marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler
        - marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler
        - marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler
        - marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler
        - marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler
        - marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler
        - marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler
        - unmarshalN__TypeKind2string(ctx context.Context, v <font color=blue>interface</font>{}) (string, error)
        - marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler
        - marshalOAVStream2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐAVStream(ctx context.Context, sel ast.SelectionSet, v *models.AVStream) graphql.Marshaler
        - marshalOAbout2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐAbout(ctx context.Context, sel ast.SelectionSet, v *models.About) graphql.Marshaler
        - unmarshalOAny2interface(ctx context.Context, v <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        - marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v <font color=blue>interface</font>{}) graphql.Marshaler
        - unmarshalOBoolean2bool(ctx context.Context, v <font color=blue>interface</font>{}) (bool, error)
        - marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler
        - unmarshalOBoolean2ᚖbool(ctx context.Context, v <font color=blue>interface</font>{}) (*bool, error)
        - marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler
        - unmarshalOInt2ᚖint(ctx context.Context, v <font color=blue>interface</font>{}) (*int, error)
        - marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler
        - unmarshalOMap2map(ctx context.Context, v <font color=blue>interface</font>{}) (<font color=blue>map</font>[string]<font color=blue>interface</font>{}, error)
        - marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v <font color=blue>map</font>[string]<font color=blue>interface</font>{}) graphql.Marshaler
        - marshalOProcess2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐProcess(ctx context.Context, sel ast.SelectionSet, v *models.Process) graphql.Marshaler
        - marshalORawAVstream2ᚖgithubᚗcomᚋdatarheiᚋcoreᚋv16ᚋhttpᚋgraphᚋmodelsᚐRawAVstream(ctx context.Context, sel ast.SelectionSet, v *models.RawAVstream) graphql.Marshaler
        - unmarshalOString2ᚖstring(ctx context.Context, v <font color=blue>interface</font>{}) (*string, error)
        - marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler
        - marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler
        - marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler
        - marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler
        - marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler
        - marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler
        - marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler

        + _AVStream_input(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_output(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_aqueue(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_queue(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_dup(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_drop(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_enc(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_looping(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_duplicating(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStream_gop(ctx context.Context, field graphql.CollectedField, obj *models.AVStream) graphql.Marshaler
        + _AVStreamIO_state(ctx context.Context, field graphql.CollectedField, obj *models.AVStreamIo) graphql.Marshaler
        + _AVStreamIO_packet(ctx context.Context, field graphql.CollectedField, obj *models.AVStreamIo) graphql.Marshaler
        + _AVStreamIO_time(ctx context.Context, field graphql.CollectedField, obj *models.AVStreamIo) graphql.Marshaler
        + _AVStreamIO_size_kb(ctx context.Context, field graphql.CollectedField, obj *models.AVStreamIo) graphql.Marshaler
        + _About_app(ctx context.Context, field graphql.CollectedField, obj *models.About) graphql.Marshaler
        + _About_id(ctx context.Context, field graphql.CollectedField, obj *models.About) graphql.Marshaler
        + _About_name(ctx context.Context, field graphql.CollectedField, obj *models.About) graphql.Marshaler
        + _About_created_at(ctx context.Context, field graphql.CollectedField, obj *models.About) graphql.Marshaler
        + _About_uptime_seconds(ctx context.Context, field graphql.CollectedField, obj *models.About) graphql.Marshaler
        + _About_version(ctx context.Context, field graphql.CollectedField, obj *models.About) graphql.Marshaler
        + _AboutVersion_number(ctx context.Context, field graphql.CollectedField, obj *models.AboutVersion) graphql.Marshaler
        + _AboutVersion_repository_commit(ctx context.Context, field graphql.CollectedField, obj *models.AboutVersion) graphql.Marshaler
        + _AboutVersion_repository_branch(ctx context.Context, field graphql.CollectedField, obj *models.AboutVersion) graphql.Marshaler
        + _AboutVersion_build_date(ctx context.Context, field graphql.CollectedField, obj *models.AboutVersion) graphql.Marshaler
        + _AboutVersion_arch(ctx context.Context, field graphql.CollectedField, obj *models.AboutVersion) graphql.Marshaler
        + _AboutVersion_compiler(ctx context.Context, field graphql.CollectedField, obj *models.AboutVersion) graphql.Marshaler
        + _Metric_name(ctx context.Context, field graphql.CollectedField, obj *models.Metric) graphql.Marshaler
        + _Metric_labels(ctx context.Context, field graphql.CollectedField, obj *models.Metric) graphql.Marshaler
        + _Metric_values(ctx context.Context, field graphql.CollectedField, obj *models.Metric) graphql.Marshaler
        + _Metrics_timerange_seconds(ctx context.Context, field graphql.CollectedField, obj *models.Metrics) graphql.Marshaler
        + _Metrics_interval_seconds(ctx context.Context, field graphql.CollectedField, obj *models.Metrics) graphql.Marshaler
        + _Metrics_metrics(ctx context.Context, field graphql.CollectedField, obj *models.Metrics) graphql.Marshaler
        + _Mutation_ping(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Probe_streams(ctx context.Context, field graphql.CollectedField, obj *models.Probe) graphql.Marshaler
        + _Probe_log(ctx context.Context, field graphql.CollectedField, obj *models.Probe) graphql.Marshaler
        + _ProbeIO_url(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_index(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_stream(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_language(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_type(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_codec(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_coder(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_bitrate_kbps(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_duration_seconds(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_fps(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_pix_fmt(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_width(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_height(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_sampling(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_layout(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _ProbeIO_channels(ctx context.Context, field graphql.CollectedField, obj *models.ProbeIo) graphql.Marshaler
        + _Process_id(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _Process_type(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _Process_reference(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _Process_created_at(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _Process_config(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _Process_state(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _Process_report(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _Process_metadata(ctx context.Context, field graphql.CollectedField, obj *models.Process) graphql.Marshaler
        + _ProcessConfig_id(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_type(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_reference(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_input(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_output(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_options(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_reconnect(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_reconnect_delay_seconds(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_autostart(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_stale_timeout_seconds(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfig_limits(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfigIO_id(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfigIo) graphql.Marshaler
        + _ProcessConfigIO_address(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfigIo) graphql.Marshaler
        + _ProcessConfigIO_options(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfigIo) graphql.Marshaler
        + _ProcessConfigLimits_cpu_usage(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfigLimits) graphql.Marshaler
        + _ProcessConfigLimits_memory_bytes(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfigLimits) graphql.Marshaler
        + _ProcessConfigLimits_waitfor_seconds(ctx context.Context, field graphql.CollectedField, obj *models.ProcessConfigLimits) graphql.Marshaler
        + _ProcessReport_created_at(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReport) graphql.Marshaler
        + _ProcessReport_prelude(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReport) graphql.Marshaler
        + _ProcessReport_log(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReport) graphql.Marshaler
        + _ProcessReport_history(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReport) graphql.Marshaler
        + _ProcessReportHistoryEntry_created_at(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReportHistoryEntry) graphql.Marshaler
        + _ProcessReportHistoryEntry_prelude(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReportHistoryEntry) graphql.Marshaler
        + _ProcessReportHistoryEntry_log(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReportHistoryEntry) graphql.Marshaler
        + _ProcessReportLogEntry_timestamp(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReportLogEntry) graphql.Marshaler
        + _ProcessReportLogEntry_data(ctx context.Context, field graphql.CollectedField, obj *models.ProcessReportLogEntry) graphql.Marshaler
        + _ProcessState_order(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_state(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_runtime_seconds(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_reconnect_seconds(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_last_logline(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_progress(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_memory_bytes(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_cpu_usage(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _ProcessState_command(ctx context.Context, field graphql.CollectedField, obj *models.ProcessState) graphql.Marshaler
        + _Progress_input(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_output(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_frame(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_packet(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_fps(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_q(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_size_kb(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_time(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_bitrate_kbit(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_speed(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_drop(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _Progress_dup(ctx context.Context, field graphql.CollectedField, obj *models.Progress) graphql.Marshaler
        + _ProgressIO_id(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_address(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_index(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_stream(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_format(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_type(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_codec(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_coder(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_frame(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_fps(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_packet(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_pps(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_size_kb(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_bitrate_kbit(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_pixfmt(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_q(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_width(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_height(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_sampling(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_layout(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_channels(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _ProgressIO_avstream(ctx context.Context, field graphql.CollectedField, obj *models.ProgressIo) graphql.Marshaler
        + _Query_ping(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query_about(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query_log(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query_metrics(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query_playoutStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query_processes(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query_process(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query_probe(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler
        + _RawAVstream_id(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_url(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_stream(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_queue(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_aqueue(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_dup(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_drop(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_enc(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_looping(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_duplicating(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_gop(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_debug(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_input(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_output(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstream_swap(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstreamIO_state(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamIo) graphql.Marshaler
        + _RawAVstreamIO_packet(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamIo) graphql.Marshaler
        + _RawAVstreamIO_time(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamIo) graphql.Marshaler
        + _RawAVstreamIO_size_kb(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamIo) graphql.Marshaler
        + _RawAVstreamSwap_url(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamSwap) graphql.Marshaler
        + _RawAVstreamSwap_status(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamSwap) graphql.Marshaler
        + _RawAVstreamSwap_lasturl(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamSwap) graphql.Marshaler
        + _RawAVstreamSwap_lasterror(ctx context.Context, field graphql.CollectedField, obj *models.RawAVstreamSwap) graphql.Marshaler
        + ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler
        + ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler
        + ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler
        + ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler
        + ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler
        + ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler
        + ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler
        + ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler
        + ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler
        + ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler
        + ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler
        + ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler
        + ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler
        + ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler
        + ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler
        + ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler
        + ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler
        + ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler
        + ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler
        + ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler
        + ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler
        + ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler
        + ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler
        + ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler
        + ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler
        + ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler
        + _IProcessReportHistoryEntry(ctx context.Context, sel ast.SelectionSet, obj models.IProcessReportHistoryEntry) graphql.Marshaler
        + _AVStream(ctx context.Context, sel ast.SelectionSet, obj *models.AVStream) graphql.Marshaler
        + _AVStreamIO(ctx context.Context, sel ast.SelectionSet, obj *models.AVStreamIo) graphql.Marshaler
        + _About(ctx context.Context, sel ast.SelectionSet, obj *models.About) graphql.Marshaler
        + _AboutVersion(ctx context.Context, sel ast.SelectionSet, obj *models.AboutVersion) graphql.Marshaler
        + _Metric(ctx context.Context, sel ast.SelectionSet, obj *models.Metric) graphql.Marshaler
        + _Metrics(ctx context.Context, sel ast.SelectionSet, obj *models.Metrics) graphql.Marshaler
        + _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler
        + _Probe(ctx context.Context, sel ast.SelectionSet, obj *models.Probe) graphql.Marshaler
        + _ProbeIO(ctx context.Context, sel ast.SelectionSet, obj *models.ProbeIo) graphql.Marshaler
        + _Process(ctx context.Context, sel ast.SelectionSet, obj *models.Process) graphql.Marshaler
        + _ProcessConfig(ctx context.Context, sel ast.SelectionSet, obj *models.ProcessConfig) graphql.Marshaler
        + _ProcessConfigIO(ctx context.Context, sel ast.SelectionSet, obj *models.ProcessConfigIo) graphql.Marshaler
        + _ProcessConfigLimits(ctx context.Context, sel ast.SelectionSet, obj *models.ProcessConfigLimits) graphql.Marshaler
        + _ProcessReport(ctx context.Context, sel ast.SelectionSet, obj *models.ProcessReport) graphql.Marshaler
        + _ProcessReportHistoryEntry(ctx context.Context, sel ast.SelectionSet, obj *models.ProcessReportHistoryEntry) graphql.Marshaler
        + _ProcessReportLogEntry(ctx context.Context, sel ast.SelectionSet, obj *models.ProcessReportLogEntry) graphql.Marshaler
        + _ProcessState(ctx context.Context, sel ast.SelectionSet, obj *models.ProcessState) graphql.Marshaler
        + _Progress(ctx context.Context, sel ast.SelectionSet, obj *models.Progress) graphql.Marshaler
        + _ProgressIO(ctx context.Context, sel ast.SelectionSet, obj *models.ProgressIo) graphql.Marshaler
        + _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler
        + _RawAVstream(ctx context.Context, sel ast.SelectionSet, obj *models.RawAVstream) graphql.Marshaler
        + _RawAVstreamIO(ctx context.Context, sel ast.SelectionSet, obj *models.RawAVstreamIo) graphql.Marshaler
        + _RawAVstreamSwap(ctx context.Context, sel ast.SelectionSet, obj *models.RawAVstreamSwap) graphql.Marshaler
        + ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler
        + ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler
        + ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler
        + ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler
        + ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler
        + ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler

    }
}
"graph.executableSchema" *-- "graph.executionContext"
"graphql.OperationContext" *-- "graph.executionContext"


namespace gzip {
    class Config << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + Level int
        + MinLength int

    }
    class gzipResponseWriter << (S,Aquamarine) >> {
        - wroteHeader bool
        - wroteBody bool
        - minLength int
        - minLengthExceeded bool
        - buffer *bytes.Buffer
        - code int

        + WriteHeader(code int)
        + Write(b []byte) (int, error)
        + Flush()
        + Hijack() (net.Conn, *bufio.ReadWriter, error)
        + Push(target string, opts *http.PushOptions) error

    }
}
"http.ResponseWriter" *-- "gzip.gzipResponseWriter"
"io.Writer" *-- "gzip.gzipResponseWriter"


namespace handler {
    class FSHandler << (S,Aquamarine) >> {
        - fs fs.FS

        + GetFile(c echo.Context) error
        + PutFile(c echo.Context) error
        + DeleteFile(c echo.Context) error
        + ListFiles(c echo.Context) error

    }
    class PingHandler << (S,Aquamarine) >> {
        + Ping(c echo.Context) error

    }
    class ProfilingHandler << (S,Aquamarine) >> {
        - handler(h http.HandlerFunc) echo.HandlerFunc

        + Register(r *echo.Group)

    }
    class PrometheusHandler << (S,Aquamarine) >> {
        - handler http.Handler

        + Metrics(c echo.Context) error

    }
}


namespace hlsrewrite {
    class HLSRewriteConfig << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + PathPrefix string

    }
    class hlsRewriter << (S,Aquamarine) >> {
        - buffer bytes.Buffer

        - rewrite(pathPrefix string)

        + Write(data []byte) (int, error)

    }
    class hlsrewrite << (S,Aquamarine) >> {
        - pathPrefix string

        - rewrite(c echo.Context, next echo.HandlerFunc) error

    }
}
"http.ResponseWriter" *-- "hlsrewrite.hlsRewriter"


namespace http {
    class Config << (S,Aquamarine) >> {
        + Logger log.Logger
        + LogBuffer log.BufferWriter
        + Restream restream.Restreamer
        + Metrics monitor.HistoryReader
        + Prometheus prometheus.Reader
        + MimeTypesFile string
        + Filesystems []fs.FS
        + IPLimiter net.IPLimiter
        + Profiling bool
        + Cors CorsConfig
        + RTMP rtmp.Server
        + SRT srt.Server
        + JWT jwt.JWT
        + Config store.Store
        + Cache cache.Cacher
        + Sessions session.RegistryReader
        + Router router.Router
        + ReadOnly bool

    }
    class CorsConfig << (S,Aquamarine) >> {
        + Origins []string

    }
    interface Server  {
        + ServeHTTP(w http.ResponseWriter, r *http.Request)

    }
    class filesystem << (S,Aquamarine) >> {
        - handler *handler.FSHandler
        - middleware echo.MiddlewareFunc

    }
    class logentry << (S,Aquamarine) >> {
        + Message string

    }
    class logwrapper << (S,Aquamarine) >> {
        - writer io.Writer

        + Write(p []byte) (int, error)

    }
    class server << (S,Aquamarine) >> {
        - logger log.Logger
        - handler <font color=blue>struct</font>{*api.AboutHandler, *handler.PrometheusHandler, *handler.ProfilingHandler, *handler.PingHandler, *api.GraphHandler, jwt.JWT}
        - v3handler <font color=blue>struct</font>{*api.LogHandler, *api.RestreamHandler, *api.PlayoutHandler, *api.RTMPHandler, *api.SRTHandler, *api.ConfigHandler, *api.SessionHandler, *api.WidgetHandler, *api.MetricsHandler}
        - middleware <font color=blue>struct</font>{echo.MiddlewareFunc, echo.MiddlewareFunc, echo.MiddlewareFunc, echo.MiddlewareFunc, echo.MiddlewareFunc, echo.MiddlewareFunc, echo.MiddlewareFunc, echo.MiddlewareFunc}
        - gzip <font color=blue>struct</font>{[]string}
        - filesystems <font color=blue>map</font>[string]*filesystem
        - router *echo.Echo
        - mimeTypesFile string
        - profiling bool
        - readOnly bool

        - setRoutes()
        - setRoutesV3(v3 *echo.Group)

        + ServeHTTP(w http.ResponseWriter, r *http.Request)

    }
}
"fs.FS" *-- "http.filesystem"

"http.Server" <|-- "http.server"

namespace iplimit {
    class Config << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + Limiter net.IPLimiter

    }
}


namespace jwks {
    class Config << (S,Aquamarine) >> {
        + Client *http.Client
        + RefreshErrorHandler ErrorHandler
        + RefreshInterval time.Duration
        + RefreshRateLimit time.Duration
        + RefreshTimeout time.Duration
        + RefreshUnknownKID bool

    }
    interface JWK  {
        + ID() string
        + Alg() string
        + Type() string
        + PublicKey() (crypto.PublicKey, error)

    }
    interface JWKS  {
        + Key(kid string) (JWK, error)
        + Cancel()

    }
    class jwkImpl << (S,Aquamarine) >> {
        - key rawJWK
        - precomputed <font color=blue>interface</font>{}

        - ecdsa() (*ecdsa.PublicKey, error)
        - rsa() (*rsa.PublicKey, error)

        + ID() string
        + Alg() string
        + Type() string
        + PublicKey() (crypto.PublicKey, error)

    }
    class jwks.ErrorHandler << (T, #FF7700) >>  {
    }
    class jwksImpl << (S,Aquamarine) >> {
        - keys <font color=blue>map</font>[string]*jwkImpl
        - cancel context.CancelFunc
        - client *http.Client
        - ctx context.Context
        - jwksURL string
        - mux sync.RWMutex
        - refreshErrorHandler ErrorHandler
        - refreshInterval time.Duration
        - refreshRateLimit time.Duration
        - refreshRequests <font color=blue>chan</font> context.CancelFunc
        - refreshTimeout time.Duration
        - refreshUnknownKID bool

        - backgroundRefresh()
        - refresh() error
        - update(jwksBytes []byte) error

        + Cancel()
        + Key(kid string) (JWK, error)

    }
    class rawJWK << (S,Aquamarine) >> {
        + Algorithm string
        + KeyType string
        + Use string
        + Curve string
        + Exponent string
        + Kid string
        + Modulus string
        + X string
        + Y string
        + X5C []string

    }
    class rawJWKs << (S,Aquamarine) >> {
        + Keys []rawJWK

    }
}

"jwks.JWK" <|-- "jwks.jwkImpl"
"jwks.JWKS" <|-- "jwks.jwksImpl"

namespace jwt {
    class Config << (S,Aquamarine) >> {
        + Realm string
        + Secret string
        + SkipLocalhost bool

    }
    interface JWT  {
        + AddValidator(iss string, issuer Validator) error
        + ClearValidators()
        + Validators() []string
        + AccessMiddleware() echo.MiddlewareFunc
        + RefreshMiddleware() echo.MiddlewareFunc
        + LoginHandler(c echo.Context) error
        + RefreshHandler(c echo.Context) error

    }
    interface Validator  {
        + String() string
        + Validate(c echo.Context) (bool, string, error)
        + Cancel()

    }
    class auth0Validator << (S,Aquamarine) >> {
        - domain string
        - issuer string
        - audience string
        - clientID string
        - users []string
        - certs jwks.JWKS

        - keyFunc(token *v5.Token) (<font color=blue>interface</font>{}, error)

        + String() string
        + Validate(c echo.Context) (bool, string, error)
        + Cancel()

    }
    class jwt << (S,Aquamarine) >> {
        - realm string
        - skipLocalhost bool
        - secret []byte
        - accessValidFor time.Duration
        - accessConfig echo-jwt.Config
        - accessMiddleware echo.MiddlewareFunc
        - refreshValidFor time.Duration
        - refreshConfig echo-jwt.Config
        - refreshMiddleware echo.MiddlewareFunc
        - validators <font color=blue>map</font>[string]Validator
        - lock sync.RWMutex

        - parseToken(use string) <font color=blue>func</font>(echo.Context, string) (<font color=blue>interface</font>{}, error)
        - createToken(username string) (string, string, error)

        + Validators() []string
        + AddValidator(iss string, issuer Validator) error
        + ClearValidators()
        + ErrorHandler(c echo.Context, err error) error
        + AccessMiddleware() echo.MiddlewareFunc
        + RefreshMiddleware() echo.MiddlewareFunc
        + LoginHandler(c echo.Context) error
        + RefreshHandler(c echo.Context) error

    }
    class localValidator << (S,Aquamarine) >> {
        - username string
        - password string

        + String() string
        + Validate(c echo.Context) (bool, string, error)
        + Cancel()

    }
}

"jwt.Validator" <|-- "jwt.auth0Validator"
"jwt.JWT" <|-- "jwt.jwt"
"jwt.Validator" <|-- "jwt.localValidator"

namespace log {
    interface BufferWriter  {
        + Events() []*Event

    }
    class Config << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + Logger log.Logger

    }
    class Event << (S,Aquamarine) >> {
        - logger *logger
        - err string

        + Time time.Time
        + Level Level
        + Component string
        + Caller string
        + Message string
        + Data Fields

        - clone() *Event

        + WithOutput(w Writer) Logger
        + WithComponent(component string) Logger
        + Log(format string, args ...<font color=blue>interface</font>{})
        + WithField(key string, value <font color=blue>interface</font>{}) Logger
        + WithFields(f Fields) Logger
        + WithError(err error) Logger
        + Debug() Logger
        + Info() Logger
        + Warn() Logger
        + Error() Logger
        + WithLevel(level Level) Logger
        + Write(p []byte) (int, error)

    }
    class Eventx << (S,Aquamarine) >> {
        + Time time.Time
        + Level Level
        + Component string
        + Reference string
        + Message string
        + Caller string
        + Detail <font color=blue>interface</font>{}

    }
    interface Formatter  {
        + Bytes(e *Event) []byte
        + String(e *Event) string

    }
    class Level << (S,Aquamarine) >> {
        + String() string
        + MarshalJSON() ([]byte, error)

    }
    class LevelRewriteRule << (S,Aquamarine) >> {
        + Level Level
        + Component string
        + Match <font color=blue>map</font>[string]string

    }
    interface Logger  {
        + WithOutput(w Writer) Logger
        + WithComponent(component string) Logger
        + WithField(key string, value <font color=blue>interface</font>{}) Logger
        + WithFields(fields Fields) Logger
        + WithError(err error) Logger
        + Log(format string, args ...<font color=blue>interface</font>{})
        + Debug() Logger
        + Info() Logger
        + Warn() Logger
        + Error() Logger
        + WithLevel(level Level) Logger
        + Write(p []byte) (int, error)

    }
    interface Writer  {
        + Write(e *Event) error

    }
    class bufferWriter << (S,Aquamarine) >> {
        - lines *ring.Ring
        - lock sync.RWMutex
        - level Level

        + Write(e *Event) error
        + Events() []*Event

    }
    class consoleFormatter << (S,Aquamarine) >> {
        - color bool

        - writeKV(key string, value string) string
        - quote(s string) string

        + Bytes(e *Event) []byte
        + String(e *Event) string

    }
    class consoleWriter << (S,Aquamarine) >> {
        - writer io.Writer
        - level Level
        - formatter Formatter

        + Write(e *Event) error

    }
    class jsonFormatter << (S,Aquamarine) >> {
        + Bytes(e *Event) []byte
        + String(e *Event) string

    }
    class jsonWriter << (S,Aquamarine) >> {
        - writer io.Writer
        - level Level
        - formatter Formatter

        + Write(e *Event) error

    }
    class levelRewriteRule << (S,Aquamarine) >> {
        - level Level
        - component string
        - match <font color=blue>map</font>[string]*regexp.Regexp

    }
    class levelRewriter << (S,Aquamarine) >> {
        - writer Writer
        - rules []levelRewriteRule

        + Write(e *Event) error

    }
    class log.Fields << (T, #FF7700) >>  {
    }
    class log.Level << (T, #FF7700) >>  {
    }
    class logger << (S,Aquamarine) >> {
        - output Writer
        - component string
        - modulePath string

        - clone() *logger

        + WithOutput(w Writer) Logger
        + WithField(key string, value <font color=blue>interface</font>{}) Logger
        + WithFields(f Fields) Logger
        + WithError(err error) Logger
        + WithComponent(component string) Logger
        + Log(format string, args ...<font color=blue>interface</font>{})
        + Debug() Logger
        + Info() Logger
        + Warn() Logger
        + Error() Logger
        + WithLevel(level Level) Logger
        + Write(p []byte) (int, error)

    }
    class multiWriter << (S,Aquamarine) >> {
        - writer []Writer

        + Write(e *Event) error

    }
    class sizeReadCloser << (S,Aquamarine) >> {
        - size int64

        + Read(p []byte) (int, error)
        + Close() error

    }
    class sizeWriter << (S,Aquamarine) >> {
        - size int64

        + Write(body []byte) (int, error)

    }
    class syncWriter << (S,Aquamarine) >> {
        - mu sync.Mutex
        - writer Writer

        + Write(e *Event) error

    }
    class topicWriter << (S,Aquamarine) >> {
        - writer Writer
        - topics <font color=blue>map</font>[string]<font color=blue>struct</font>{}

        + Write(e *Event) error

    }
}
"log.Writer" *-- "log.BufferWriter"
"io.ReadCloser" *-- "log.sizeReadCloser"
"http.ResponseWriter" *-- "log.sizeWriter"

"log.Logger" <|-- "log.Event"
"log.BufferWriter" <|-- "log.bufferWriter"
"log.Writer" <|-- "log.bufferWriter"
"log.Formatter" <|-- "log.consoleFormatter"
"log.Writer" <|-- "log.consoleWriter"
"log.Formatter" <|-- "log.jsonFormatter"
"log.Writer" <|-- "log.jsonWriter"
"log.Writer" <|-- "log.levelRewriter"
"log.Logger" <|-- "log.logger"
"log.Writer" <|-- "log.multiWriter"
"log.Writer" <|-- "log.syncWriter"
"log.Writer" <|-- "log.topicWriter"

namespace main {
    class importConfig << (S,Aquamarine) >> {
        - id string
        - snapshotInterval int
        - binary string
        - inputstream string
        - outputstream string
        - usbcam importConfigUSBCam
        - raspicam importConfigRaspiCam
        - audio importConfigAudio

    }
    class importConfigAudio << (S,Aquamarine) >> {
        - enable bool
        - device string
        - bitrate string
        - channels string
        - layout string
        - sampling string

    }
    class importConfigRaspiCam << (S,Aquamarine) >> {
        - enable bool
        - device string
        - format string
        - fps string
        - width string
        - height string

    }
    class importConfigUSBCam << (S,Aquamarine) >> {
        - enable bool
        - device string
        - fps string
        - gop string
        - bitrate string
        - preset string
        - profile string
        - width string
        - height string

    }
    class restreamerUIEgress << (S,Aquamarine) >> {
        + Control <font color=blue>struct</font>{<font color=blue>struct</font>{bool, bool, int, int}}
        + Name string
        + Output <font color=blue>struct</font>{string, []string}
        + Settings <font color=blue>interface</font>{}
        + Version int

    }
    class restreamerUIEgressSettingsHLS << (S,Aquamarine) >> {
        + Address string
        + Protocol string
        + Options <font color=blue>struct</font>{string, []string, string, string, string, string, string, string, string, string, string, string, string, string}

    }
    class restreamerUIEgressSettingsRTMP << (S,Aquamarine) >> {
        + Address string
        + Protocol string

    }
    class restreamerUIIngest << (S,Aquamarine) >> {
        + Control <font color=blue>struct</font>{<font color=blue>struct</font>{bool, int, int}, <font color=blue>struct</font>{bool, bool, int, int}, <font color=blue>struct</font>{bool, int}}
        + License string
        + Meta <font color=blue>struct</font>{<font color=blue>struct</font>{string, string}, string, string}
        + Player restreamerUIPlayer
        + Profiles []restreamerUIProfile
        + Sources []restreamerUISource
        + Version int
        + Imported bool

    }
    class restreamerUIPlayer << (S,Aquamarine) >> {
        + Autoplay bool
        + Color <font color=blue>struct</font>{string, string}
        + GA <font color=blue>struct</font>{string, string}
        + Logo <font color=blue>struct</font>{string, string, string}
        + Mute bool
        + Statistics bool

    }
    class restreamerUIProfile << (S,Aquamarine) >> {
        + Audio <font color=blue>struct</font>{restreamerUIProfileAV, restreamerUIProfileAV, int, int}
        + Video <font color=blue>struct</font>{restreamerUIProfileAV, restreamerUIProfileAV, int, int}

    }
    class restreamerUIProfileAV << (S,Aquamarine) >> {
        + Coder string
        + Codec string
        + Mapping []string
        + Settings <font color=blue>interface</font>{}

    }
    class restreamerUIProfileCoderSettingsAAC << (S,Aquamarine) >> {
        + Bitrate string
        + Channels string
        + Layout string
        + Sampling string

    }
    class restreamerUIProfileCoderSettingsCopy << (S,Aquamarine) >> {
    }
    class restreamerUIProfileCoderSettingsX264 << (S,Aquamarine) >> {
        + Bitrate string
        + FPS string
        + Preset string
        + Profile string
        + Tune string

    }
    class restreamerUISource << (S,Aquamarine) >> {
        + Inputs []restreamerUISourceInput
        + Settings <font color=blue>interface</font>{}
        + Streams []restreamerUISourceStream
        + Type string

    }
    class restreamerUISourceInput << (S,Aquamarine) >> {
        + Address string
        + Options []string

    }
    class restreamerUISourceSettingsALSA << (S,Aquamarine) >> {
        + Address string
        + Device string
        + Sampling int
        + Channels int
        + Delay int

    }
    class restreamerUISourceSettingsNetwork << (S,Aquamarine) >> {
        + Address string
        + General <font color=blue>struct</font>{[]string, int}
        + HTTP <font color=blue>struct</font>{bool, int, bool}
        + Mode string
        + RTSP <font color=blue>struct</font>{int, bool}

    }
    class restreamerUISourceSettingsV4L << (S,Aquamarine) >> {
        + Device string
        + Format string
        + Framerate int
        + Size string

    }
    class restreamerUISourceSettingsVirtualAudio << (S,Aquamarine) >> {
        + Amplitude int
        + BeepFactor int
        + Color string
        + Frequency int
        + Layout string
        + Sampling int
        + Source string

    }
    class restreamerUISourceStream << (S,Aquamarine) >> {
        + Bitrate int
        + Channels int
        + Codec string
        + Coder string
        + Duration int
        + Format string
        + FPS int
        + Height int
        + Index int
        + Language string
        + Layout string
        + PixelFormat string
        + Sampling int
        + Stream int
        + Type string
        + URL string
        + Width int

    }
    class storeDataV1 << (S,Aquamarine) >> {
        + Addresses <font color=blue>struct</font>{string, string, <font color=blue>struct</font>{*storeDataV1Stream, *storeDataV1Stream}}
        + Options <font color=blue>struct</font>{<font color=blue>struct</font>{string, string, string, string, string}, <font color=blue>struct</font>{<font color=blue>struct</font>{string, string, string, string}, string}, <font color=blue>struct</font>{bool, string, bool, bool, <font color=blue>struct</font>{string, string, string}}, bool, <font color=blue>struct</font>{string, string, string, string, string, string, string}}
        + States <font color=blue>struct</font>{<font color=blue>struct</font>{string}, <font color=blue>struct</font>{string}}
        + Actions <font color=blue>struct</font>{string, string}

    }
    class storeDataV1Stream << (S,Aquamarine) >> {
        + Index int
        + Type string
        + Codec string
        + Width int
        + Height int
        + Format string
        + Layout string
        + Channels int
        + Sampling string

    }
}


namespace metric {
    interface Collector  {
        + Prefix() string
        + Describe() []*Description
        + Collect() Metrics
        + Stop()

    }
    class Description << (S,Aquamarine) >> {
        - name string
        - description string
        - labels []string

        + String() string
        + Name() string
        + Description() string
        + Labels() []string

    }
    interface Metrics  {
        + Value(name string, labels ...string) Value
        + Values(name string, labels ...string) []Value
        + Labels(name string, label string) []string
        + All() []Value
        + Add(v Value)
        + String() string

    }
    interface Pattern  {
        + Name() string
        + Match(labels <font color=blue>map</font>[string]string) bool
        + IsValid() bool

    }
    interface Reader  {
        + Collect( []Pattern) Metrics

    }
    interface Value  {
        + Name() string
        + Val() float64
        + L(name string) string
        + Labels() <font color=blue>map</font>[string]string
        + Match(patterns []Pattern) bool
        + Hash() string
        + String() string

    }
    class metrics << (S,Aquamarine) >> {
        - values []Value

        + String() string
        + Values(name string, labels ...string) []Value
        + Value(name string, labels ...string) Value
        + All() []Value
        + Labels(name string, label string) []string
        + Add(v Value)

    }
    class pattern << (S,Aquamarine) >> {
        - name string
        - labels <font color=blue>map</font>[string]*regexp.Regexp
        - valid bool

        + Name() string
        + Match(labels <font color=blue>map</font>[string]string) bool
        + IsValid() bool

    }
    class value << (S,Aquamarine) >> {
        - name string
        - labels <font color=blue>map</font>[string]string
        - value float64
        - hash string

        + Hash() string
        + String() string
        + Name() string
        + Val() float64
        + L(name string) string
        + Labels() <font color=blue>map</font>[string]string
        + Match(patterns []Pattern) bool

    }
}

"metric.Metrics" <|-- "metric.metrics"
"metric.Pattern" <|-- "metric.pattern"
"metric.Value" <|-- "metric.value"

namespace mime {
    class Config << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + MimeTypesFile string
        + DefaultContentType string

    }
}


namespace mock {
    class Response << (S,Aquamarine) >> {
        + Code int
        + Message string
        + Data <font color=blue>interface</font>{}

    }
}


namespace models {
    class AVStream << (S,Aquamarine) >> {
        + Input *AVStreamIo
        + Output *AVStreamIo
        + Aqueue scalars.Uint64
        + Queue scalars.Uint64
        + Dup scalars.Uint64
        + Drop scalars.Uint64
        + Enc scalars.Uint64
        + Looping bool
        + Duplicating bool
        + Gop string

        + UnmarshalRestream(avstream *app.AVstream)

    }
    class AVStreamIo << (S,Aquamarine) >> {
        + State string
        + Packet scalars.Uint64
        + Time scalars.Uint64
        + SizeKb scalars.Uint64

        + UnmarshalRestream(io app.AVstreamIO)

    }
    class About << (S,Aquamarine) >> {
        + App string
        + ID string
        + Name string
        + CreatedAt time.Time
        + UptimeSeconds scalars.Uint64
        + Version *AboutVersion

    }
    class AboutVersion << (S,Aquamarine) >> {
        + Number string
        + RepositoryCommit string
        + RepositoryBranch string
        + BuildDate string
        + Arch string
        + Compiler string

    }
    class Command << (S,Aquamarine) >> {
        + IsValid() bool
        + String() string
        + UnmarshalGQL(v <font color=blue>interface</font>{}) error
        + MarshalGQL(w io.Writer)

    }
    interface IProcessReportHistoryEntry  {
        + IsIProcessReportHistoryEntry()
        + GetCreatedAt() time.Time
        + GetPrelude() []string
        + GetLog() []*ProcessReportLogEntry

    }
    class Metric << (S,Aquamarine) >> {
        + Name string
        + Labels <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + Values []*scalars.MetricsResponseValue

    }
    class MetricInput << (S,Aquamarine) >> {
        + Name string
        + Labels <font color=blue>map</font>[string]<font color=blue>interface</font>{}

    }
    class Metrics << (S,Aquamarine) >> {
        + TimerangeSeconds *int
        + IntervalSeconds *int
        + Metrics []*Metric

    }
    class MetricsInput << (S,Aquamarine) >> {
        + TimerangeSeconds *int
        + IntervalSeconds *int
        + Metrics []*MetricInput

    }
    class Probe << (S,Aquamarine) >> {
        + Streams []*ProbeIo
        + Log []string

        + UnmarshalRestream(probe app.Probe)

    }
    class ProbeIo << (S,Aquamarine) >> {
        + URL string
        + Index scalars.Uint64
        + Stream scalars.Uint64
        + Language string
        + Type string
        + Codec string
        + Coder string
        + BitrateKbps float64
        + DurationSeconds float64
        + Fps float64
        + PixFmt string
        + Width scalars.Uint64
        + Height scalars.Uint64
        + Sampling scalars.Uint64
        + Layout string
        + Channels scalars.Uint64

        + UnmarshalRestream(io app.ProbeIO)

    }
    class Process << (S,Aquamarine) >> {
        + ID string
        + Type string
        + Reference string
        + CreatedAt time.Time
        + Config *ProcessConfig
        + State *ProcessState
        + Report *ProcessReport
        + Metadata <font color=blue>map</font>[string]<font color=blue>interface</font>{}

        + UnmarshalRestream(process *app.Process, state *app.State, report *app.Log, metadata <font color=blue>map</font>[string]<font color=blue>interface</font>{})

    }
    class ProcessConfig << (S,Aquamarine) >> {
        + ID string
        + Type string
        + Reference string
        + Input []*ProcessConfigIo
        + Output []*ProcessConfigIo
        + Options []string
        + Reconnect bool
        + ReconnectDelaySeconds scalars.Uint64
        + Autostart bool
        + StaleTimeoutSeconds scalars.Uint64
        + Limits *ProcessConfigLimits

        + UnmarshalRestream(config *app.Config)

    }
    class ProcessConfigIo << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Options []string

    }
    class ProcessConfigLimits << (S,Aquamarine) >> {
        + CPUUsage float64
        + MemoryBytes scalars.Uint64
        + WaitforSeconds scalars.Uint64

    }
    class ProcessReport << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + Prelude []string
        + Log []*ProcessReportLogEntry
        + History []*ProcessReportHistoryEntry

        + UnmarshalRestream(report *app.Log)
        + IsIProcessReportHistoryEntry()
        + GetCreatedAt() time.Time
        + GetPrelude() []string
        + GetLog() []*ProcessReportLogEntry

    }
    class ProcessReportHistoryEntry << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + Prelude []string
        + Log []*ProcessReportLogEntry

        + UnmarshalRestream(entry app.LogHistoryEntry)
        + IsIProcessReportHistoryEntry()
        + GetCreatedAt() time.Time
        + GetPrelude() []string
        + GetLog() []*ProcessReportLogEntry

    }
    class ProcessReportLogEntry << (S,Aquamarine) >> {
        + Timestamp time.Time
        + Data string

    }
    class ProcessState << (S,Aquamarine) >> {
        + Order string
        + State string
        + RuntimeSeconds scalars.Uint64
        + ReconnectSeconds int
        + LastLogline string
        + Progress *Progress
        + MemoryBytes scalars.Uint64
        + CPUUsage float64
        + Command []string

        + UnmarshalRestream(state *app.State)

    }
    class Progress << (S,Aquamarine) >> {
        + Input []*ProgressIo
        + Output []*ProgressIo
        + Frame scalars.Uint64
        + Packet scalars.Uint64
        + Fps float64
        + Q float64
        + SizeKb scalars.Uint64
        + Time float64
        + BitrateKbit float64
        + Speed float64
        + Drop scalars.Uint64
        + Dup scalars.Uint64

        + UnmarshalRestream(progress *app.Progress)

    }
    class ProgressIo << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Index scalars.Uint64
        + Stream scalars.Uint64
        + Format string
        + Type string
        + Codec string
        + Coder string
        + Frame scalars.Uint64
        + Fps float64
        + Packet scalars.Uint64
        + Pps float64
        + SizeKb scalars.Uint64
        + BitrateKbit float64
        + Pixfmt string
        + Q float64
        + Width scalars.Uint64
        + Height scalars.Uint64
        + Sampling scalars.Uint64
        + Layout string
        + Channels scalars.Uint64
        + Avstream *AVStream

        + UnmarshalRestream(io *app.ProgressIO)

    }
    class RawAVstream << (S,Aquamarine) >> {
        + ID string
        + URL string
        + Stream scalars.Uint64
        + Queue scalars.Uint64
        + Aqueue scalars.Uint64
        + Dup scalars.Uint64
        + Drop scalars.Uint64
        + Enc scalars.Uint64
        + Looping bool
        + Duplicating bool
        + Gop string
        + Debug <font color=blue>interface</font>{}
        + Input *RawAVstreamIo
        + Output *RawAVstreamIo
        + Swap *RawAVstreamSwap

        + UnmarshalPlayout(status playout.Status)

    }
    class RawAVstreamIo << (S,Aquamarine) >> {
        + State State
        + Packet scalars.Uint64
        + Time scalars.Uint64
        + SizeKb scalars.Uint64

        + UnmarshalPlayout(io playout.StatusIO)

    }
    class RawAVstreamSwap << (S,Aquamarine) >> {
        + URL string
        + Status string
        + Lasturl string
        + Lasterror string

        + UnmarshalPlayout(status playout.Status)

    }
    class State << (S,Aquamarine) >> {
        + IsValid() bool
        + String() string
        + UnmarshalGQL(v <font color=blue>interface</font>{}) error
        + MarshalGQL(w io.Writer)

    }
    class models.Command << (T, #FF7700) >>  {
    }
    class models.State << (T, #FF7700) >>  {
    }
}

"models.IProcessReportHistoryEntry" <|-- "models.ProcessReport"
"models.IProcessReportHistoryEntry" <|-- "models.ProcessReportHistoryEntry"

namespace monitor {
    class Config << (S,Aquamarine) >> {
    }
    class HistoryConfig << (S,Aquamarine) >> {
        + Config Config
        + Enable bool
        + Timerange time.Duration
        + Interval time.Duration

    }
    class HistoryMetrics << (S,Aquamarine) >> {
        + TS time.Time
        + Metrics metric.Metrics

    }
    interface HistoryMonitor  {
        + Register(c metric.Collector)
        + UnregisterAll()

    }
    interface HistoryReader  {
        + History(timerange time.Duration, interval time.Duration, patterns []metric.Pattern) []HistoryMetrics
        + Resolution() (time.Duration, time.Duration)

    }
    interface Monitor  {
        + Register(c metric.Collector)
        + UnregisterAll()

    }
    interface Reader  {
        + Collect(patterns []metric.Pattern) metric.Metrics
        + Describe() []*metric.Description

    }
    class cpuCollector << (S,Aquamarine) >> {
        - ncpuDescr *metric.Description
        - systemDescr *metric.Description
        - userDescr *metric.Description
        - idleDescr *metric.Description
        - otherDescr *metric.Description
        - ncpu float64

        + Stop()
        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics

    }
    class diskCollector << (S,Aquamarine) >> {
        - path string
        - totalDescr *metric.Description
        - usageDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
    class ffmpegCollector << (S,Aquamarine) >> {
        - prefix string
        - ffmpeg ffmpeg.FFmpeg
        - processDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
    class filesystemCollector << (S,Aquamarine) >> {
        - fs fs.Filesystem
        - name string
        - limitDescr *metric.Description
        - usageDescr *metric.Description
        - filesDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
    class historyMonitor << (S,Aquamarine) >> {
        - monitor Monitor
        - enable bool
        - timerange time.Duration
        - interval time.Duration
        - metrics *ring.Ring
        - lock sync.RWMutex
        - stopTicker <font color=blue>chan</font> <font color=blue>struct</font>{}
        - patterns []metric.Pattern

        - tick()
        - collectAll(ts time.Time)
        - resample(values []HistoryMetrics, timerange time.Duration, interval time.Duration) []HistoryMetrics

        + Register(c metric.Collector)
        + Collect(patterns []metric.Pattern) metric.Metrics
        + Describe() []*metric.Description
        + UnregisterAll()
        + History(timerange time.Duration, interval time.Duration, patterns []metric.Pattern) []HistoryMetrics
        + Resolution() (time.Duration, time.Duration)

    }
    class memCollector << (S,Aquamarine) >> {
        - totalDescr *metric.Description
        - freeDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
    class monitor << (S,Aquamarine) >> {
        - lock sync.RWMutex
        - collectors <font color=blue>map</font>[string]metric.Collector

        + Register(c metric.Collector)
        + Collect(patterns []metric.Pattern) metric.Metrics
        + Describe() []*metric.Description
        + UnregisterAll()

    }
    class netCollector << (S,Aquamarine) >> {
        - rxDescr *metric.Description
        - txDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
    class restreamCollector << (S,Aquamarine) >> {
        - prefix string
        - r restream.Restreamer
        - restreamProcessDescr *metric.Description
        - restreamProcessStatesDescr *metric.Description
        - restreamProcessIODescr *metric.Description
        - restreamStatesDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
    class sessionCollector << (S,Aquamarine) >> {
        - prefix string
        - r session.RegistryReader
        - collectors []string
        - totalDescr *metric.Description
        - limitDescr *metric.Description
        - activeDescr *metric.Description
        - rxBytesDescr *metric.Description
        - txBytesDescr *metric.Description
        - rxBitrateDescr *metric.Description
        - txBitrateDescr *metric.Description
        - maxTxBitrateDescr *metric.Description
        - maxRxBitrateDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
    class uptimeCollector << (S,Aquamarine) >> {
        - t time.Time
        - uptimeDescr *metric.Description

        + Prefix() string
        + Describe() []*metric.Description
        + Collect() metric.Metrics
        + Stop()

    }
}
"monitor.HistoryReader" *-- "monitor.HistoryMonitor"
"monitor.Reader" *-- "monitor.HistoryReader"
"monitor.Reader" *-- "monitor.Monitor"

"metric.Collector" <|-- "monitor.cpuCollector"
"metric.Collector" <|-- "monitor.diskCollector"
"metric.Collector" <|-- "monitor.ffmpegCollector"
"metric.Collector" <|-- "monitor.filesystemCollector"
"metric.Reader" <|-- "monitor.historyMonitor"
"monitor.HistoryMonitor" <|-- "monitor.historyMonitor"
"monitor.HistoryReader" <|-- "monitor.historyMonitor"
"monitor.Monitor" <|-- "monitor.historyMonitor"
"monitor.Reader" <|-- "monitor.historyMonitor"
"metric.Collector" <|-- "monitor.memCollector"
"metric.Reader" <|-- "monitor.monitor"
"monitor.HistoryMonitor" <|-- "monitor.monitor"
"monitor.Monitor" <|-- "monitor.monitor"
"monitor.Reader" <|-- "monitor.monitor"
"metric.Collector" <|-- "monitor.netCollector"
"metric.Collector" <|-- "monitor.restreamCollector"
"metric.Collector" <|-- "monitor.sessionCollector"
"metric.Collector" <|-- "monitor.uptimeCollector"

namespace net {
    interface IPLimiter  {
        + IsAllowed(ip string) bool

    }
    interface Portranger  {
        + Get() (int, error)
        + Put( int)

    }
    class dummy << (S,Aquamarine) >> {
        + Get() (int, error)
        + Put(port int)

    }
    class iplimit << (S,Aquamarine) >> {
        - allowlist []*net.IPNet
        - blocklist []*net.IPNet

        + IsAllowed(ip string) bool

    }
    class nulliplimiter << (S,Aquamarine) >> {
        + IsAllowed(ip string) bool

    }
    class portrange << (S,Aquamarine) >> {
        - min int
        - ports []bool
        - minUnused int
        - lock sync.Mutex

        + Get() (int, error)
        + Put(port int)

    }
}

"net.Portranger" <|-- "net.dummy"
"net.IPLimiter" <|-- "net.iplimit"
"net.IPLimiter" <|-- "net.nulliplimiter"
"net.Portranger" <|-- "net.portrange"

namespace parse {
    class Config << (S,Aquamarine) >> {
        + LogHistory int
        + LogLines int
        + PreludeHeadLines int
        + PreludeTailLines int
        + Logger log.Logger
        + Collector session.Collector

    }
    class Duration << (S,Aquamarine) >> {
        + MarshalJSON() ([]byte, error)
        + UnmarshalJSON(b []byte) error

    }
    interface Parser  {
        + Progress() app.Progress
        + Prelude() []string
        + Report() Report
        + ReportHistory() []Report
        + TransferReportHistory( Parser) error

    }
    class Report << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + Prelude []string
        + Log []process.Line

    }
    class averager << (S,Aquamarine) >> {
        - fps *average.SlidingWindow
        - pps *average.SlidingWindow
        - bitrate *average.SlidingWindow

        - init(window time.Duration, granularity time.Duration)
        - stop()

    }
    class ffmpegAVstream << (S,Aquamarine) >> {
        + Input ffmpegAVstreamIO
        + Output ffmpegAVstreamIO
        + Address string
        + URL string
        + Stream uint64
        + Aqueue uint64
        + Queue uint64
        + Dup uint64
        + Drop uint64
        + Enc uint64
        + Looping bool
        + LoopingRuntime uint64
        + Duplicating bool
        + GOP string

        - export() *app.AVstream

    }
    class ffmpegAVstreamIO << (S,Aquamarine) >> {
        + State string
        + Packet uint64
        + Time uint64
        + Size uint64

        - export() app.AVstreamIO

    }
    class ffmpegProcess << (S,Aquamarine) >> {
        - input []ffmpegProcessIO
        - output []ffmpegProcessIO

        - export() app.Progress

    }
    class ffmpegProcessIO << (S,Aquamarine) >> {
        + Address string
        + IP string
        + Format string
        + Index uint64
        + Stream uint64
        + Type string
        + Codec string
        + Coder string
        + Pixfmt string
        + Width uint64
        + Height uint64
        + Sampling uint64
        + Layout string
        + Channels uint64

        - export() app.ProgressIO

    }
    class ffmpegProgress << (S,Aquamarine) >> {
        + Input []ffmpegProgressIO
        + Output []ffmpegProgressIO
        + Frame uint64
        + Packet uint64
        + FPS float64
        + PPS float64
        + Quantizer float64
        + SizeKB uint64
        + Size uint64
        + Bitrate float64
        + Time Duration
        + Speed float64
        + Drop uint64
        + Dup uint64

        - exportTo(progress *app.Progress)

    }
    class ffmpegProgressIO << (S,Aquamarine) >> {
        + Index uint64
        + Stream uint64
        + SizeKB uint64
        + Size uint64
        + Bitrate float64
        + Frame uint64
        + Keyframe uint64
        + Framerate <font color=blue>struct</font>{float64, float64, float64}
        + Packet uint64
        + Extradata uint64
        + FPS float64
        + PPS float64
        + Quantizer float64

        - exportTo(progress *app.ProgressIO)

    }
    class parser << (S,Aquamarine) >> {
        - re <font color=blue>struct</font>{*regexp.Regexp, *regexp.Regexp, *regexp.Regexp, *regexp.Regexp, *regexp.Regexp, *regexp.Regexp, *regexp.Regexp}
        - prelude <font color=blue>struct</font>{int, int, uint64, []string, *ring.Ring, bool}
        - log *ring.Ring
        - logLines int
        - logStart time.Time
        - logHistory *ring.Ring
        - logHistoryLength int
        - progress <font color=blue>struct</font>{ffmpegProgress, <font color=blue>map</font>[string]ffmpegAVstream}
        - process ffmpegProcess
        - stats <font color=blue>struct</font>{bool, stats, []stats, []{packageName}stats}
        - averager <font color=blue>struct</font>{bool, time.Duration, time.Duration, averager, []averager, []{packageName}averager}
        - collector session.Collector
        - logger log.Logger
        - lock <font color=blue>struct</font>{sync.RWMutex, sync.RWMutex, sync.RWMutex}

        - parseDefaultProgress(line string) error
        - parseIO(kind string, line string) error
        - parseFFmpegProgress(line string) error
        - parseAVstreamProgress(line string) error
        - parsePrelude() bool
        - addLog(line string)
        - storeLogHistory()

        + Parse(line string) uint64
        + Progress() app.Progress
        + Prelude() []string
        + Log() []process.Line
        + ResetStats()
        + ResetLog()
        + Report() Report
        + ReportHistory() []Report
        + TransferReportHistory(dst Parser) error

    }
    class stats << (S,Aquamarine) >> {
        - last statsData
        - diff statsData

        - updateFromProgress(p *ffmpegProgress)
        - updateFromProgressIO(p *ffmpegProgressIO)

    }
    class statsData << (S,Aquamarine) >> {
        - frame uint64
        - packet uint64
        - size uint64
        - dup uint64
        - drop uint64

    }
}
"time.Duration" *-- "parse.Duration"

"parse.Parser" <|-- "parse.parser"
"process.Parser" <|-- "parse.parser"

namespace playout {
    class Status << (S,Aquamarine) >> {
        + ID string
        + Address string
        + Stream uint64
        + Queue uint64
        + AQueue uint64
        + Dup uint64
        + Drop uint64
        + Enc uint64
        + Looping bool
        + Duplicating bool
        + GOP string
        + Debug <font color=blue>interface</font>{}
        + Input StatusIO
        + Output StatusIO
        + Swap StatusSwap

    }
    class StatusIO << (S,Aquamarine) >> {
        + State string
        + Packet uint64
        + Time uint64
        + Size uint64

    }
    class StatusSwap << (S,Aquamarine) >> {
        + Address string
        + Status string
        + LastAddress string
        + LastError string

    }
}


namespace prelude {
    class IO << (S,Aquamarine) >> {
        + Address string
        + Format string
        + Index uint64
        + Stream uint64
        + Language string
        + Type string
        + Codec string
        + Coder string
        + Bitrate float64
        + Duration float64
        + FPS float64
        + Pixfmt string
        + Width uint64
        + Height uint64
        + Sampling uint64
        + Layout string
        + Channels uint64

    }
}


namespace probe {
    class Config << (S,Aquamarine) >> {
        + Logger log.Logger

    }
    interface Parser  {
        + Probe() app.Probe

    }
    class probeIO << (S,Aquamarine) >> {
        + Address string
        + Format string
        + Index uint64
        + Stream uint64
        + Language string
        + Type string
        + Codec string
        + Coder string
        + Bitrate float64
        + Duration float64
        + FPS float64
        + Pixfmt string
        + Width uint64
        + Height uint64
        + Sampling uint64
        + Layout string
        + Channels uint64

        - export() app.ProbeIO

    }
    class prober << (S,Aquamarine) >> {
        - data []process.Line
        - inputs []probeIO
        - logger log.Logger

        - parseJSON(line string)
        - parseDefault()

        + Probe() app.Probe
        + Parse(line string) uint64
        + Log() []process.Line
        + ResetStats()
        + ResetLog()

    }
}

"probe.Parser" <|-- "probe.prober"
"process.Parser" <|-- "probe.prober"

namespace process {
    class Config << (S,Aquamarine) >> {
        + Binary string
        + Args []string
        + Reconnect bool
        + ReconnectDelay time.Duration
        + StaleTimeout time.Duration
        + LimitCPU float64
        + LimitMemory uint64
        + LimitDuration time.Duration
        + Parser Parser
        + OnStart <font color=blue>func</font>()
        + OnExit <font color=blue>func</font>()
        + OnStateChange <font color=blue>func</font>(string, string)
        + Logger log.Logger

    }
    interface Limiter  {
        + Start(process psutil.Process) error
        + Stop()
        + Current() (float64, uint64)
        + Limits() (float64, uint64)

    }
    class LimiterConfig << (S,Aquamarine) >> {
        + CPU float64
        + Memory uint64
        + WaitFor time.Duration
        + OnLimit LimitFunc

    }
    class Line << (S,Aquamarine) >> {
        + Timestamp time.Time
        + Data string

    }
    interface Parser  {
        + Parse(line string) uint64
        + ResetStats()
        + ResetLog()
        + Log() []Line

    }
    interface Process  {
        + Status() Status
        + Start() error
        + Stop(wait bool) error
        + Kill(wait bool) error
        + IsRunning() bool

    }
    class States << (S,Aquamarine) >> {
        + Finished uint64
        + Starting uint64
        + Running uint64
        + Finishing uint64
        + Failed uint64
        + Killed uint64

    }
    class Status << (S,Aquamarine) >> {
        + State string
        + States States
        + Order string
        + Duration time.Duration
        + Time time.Time
        + CPU <font color=blue>struct</font>{float64, float64}
        + Memory <font color=blue>struct</font>{uint64, uint64}

    }
    class limiter << (S,Aquamarine) >> {
        - proc psutil.Process
        - lock sync.Mutex
        - cancel context.CancelFunc
        - onLimit LimitFunc
        - cpu float64
        - cpuCurrent float64
        - cpuLast float64
        - cpuLimitSince time.Time
        - memory uint64
        - memoryCurrent uint64
        - memoryLast uint64
        - memoryLimitSince time.Time
        - waitFor time.Duration

        - reset()
        - ticker(ctx context.Context)
        - collect(t time.Time)

        + Start(process psutil.Process) error
        + Stop()
        + Current() (float64, uint64)
        + Limits() (float64, uint64)

    }
    class nullParser << (S,Aquamarine) >> {
        + Parse(line string) uint64
        + Log() []Line
        + ResetStats()
        + ResetLog()

    }
    class process << (S,Aquamarine) >> {
        - binary string
        - args []string
        - cmd *exec.Cmd
        - pid int32
        - stdout io.ReadCloser
        - lastLine string
        - state <font color=blue>struct</font>{stateType, time.Time, States, sync.Mutex}
        - order <font color=blue>struct</font>{string, sync.Mutex}
        - parser Parser
        - stale <font color=blue>struct</font>{time.Time, time.Duration, context.CancelFunc, sync.Mutex}
        - reconn <font color=blue>struct</font>{bool, time.Duration, *time.Timer, sync.Mutex}
        - killTimer *time.Timer
        - killTimerLock sync.Mutex
        - logger log.Logger
        - debuglogger log.Logger
        - callbacks <font color=blue>struct</font>{<font color=blue>func</font>() , <font color=blue>func</font>() , <font color=blue>func</font>(string, string) , sync.Mutex}
        - limits Limiter

        - initState(state stateType)
        - setState(state stateType) error
        - getState() stateType
        - isRunning() bool
        - getStateString() string
        - start() error
        - stop(wait bool) error
        - reconnect()
        - unreconnect()
        - staler(ctx context.Context)
        - reader()
        - waiter()

        + Status() Status
        + IsRunning() bool
        + Start() error
        + Stop(wait bool) error
        + Kill(wait bool) error

    }
    class process.LimitFunc << (T, #FF7700) >>  {
    }
    class process.stateType << (T, #FF7700) >>  {
    }
    class stateType << (S,Aquamarine) >> {
        + String() string
        + IsRunning() bool

    }
}

"process.Limiter" <|-- "process.limiter"
"process.Parser" <|-- "process.nullParser"
"process.Process" <|-- "process.process"

namespace prometheus {
    interface Metrics  {
        + Register(cs prometheus.Collector) error
        + UnregisterAll()

    }
    interface Reader  {
        + HTTPHandler() http.Handler

    }
    class cpuCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - cpuSystemTimeDesc *prometheus.Desc
        - cpuUserTimeDesc *prometheus.Desc
        - cpuIdleTimeDesc *prometheus.Desc
        - cpuOtherTimeDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
    class diskCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - diskTotalDesc *prometheus.Desc
        - diskUsageDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
    class filesystemCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - fsLimitDesc *prometheus.Desc
        - fsUsageDesc *prometheus.Desc
        - fsFilesDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
    class memCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - memLimitDesc *prometheus.Desc
        - memFreeDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
    class metrics << (S,Aquamarine) >> {
        - registry *prometheus.Registry
        - collectors []prometheus.Collector

        + Register(cs prometheus.Collector) error
        + UnregisterAll()
        + HTTPHandler() http.Handler

    }
    class netCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - netRxDesc *prometheus.Desc
        - netTxDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
    class restreamCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - ffmpegProcessDesc *prometheus.Desc
        - ffmpegProcessStatesDesc *prometheus.Desc
        - ffmpegProcessIODesc *prometheus.Desc
        - ffmpegStatesDesc *prometheus.Desc
        - ffmpegStatesTotalDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
    class sessionCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - totalDesc *prometheus.Desc
        - activeDesc *prometheus.Desc
        - rxDesc *prometheus.Desc
        - txDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
    class uptimeCollector << (S,Aquamarine) >> {
        - core string
        - collector metric.Reader
        - uptimeDesc *prometheus.Desc

        + Describe(ch <font color=blue>chan</font> *prometheus.Desc)
        + Collect(ch <font color=blue>chan</font> prometheus.Metric)

    }
}
"prometheus.Reader" *-- "prometheus.Metrics"

"prometheus.Metrics" <|-- "prometheus.metrics"
"prometheus.Reader" <|-- "prometheus.metrics"

namespace psutil {
    class CPUInfoStat << (S,Aquamarine) >> {
        + System float64
        + User float64
        + Idle float64
        + Other float64

    }
    class MemoryInfoStat << (S,Aquamarine) >> {
        + Total uint64
        + Available uint64
        + Used uint64

    }
    interface Process  {
        + CPUPercent() (*CPUInfoStat, error)
        + VirtualMemory() (uint64, error)
        + Stop()

    }
    interface Util  {
        + Start()
        + Stop()
        + CPUCounts(logical bool) (float64, error)
        + CPUPercent() (*CPUInfoStat, error)
        + DiskUsage(path string) (*disk.UsageStat, error)
        + VirtualMemory() (*MemoryInfoStat, error)
        + NetIOCounters(pernic bool) ([]net.IOCountersStat, error)
        + Process(pid int32) (Process, error)

    }
    class cpuTimesStat << (S,Aquamarine) >> {
        - total float64
        - system float64
        - user float64
        - idle float64
        - other float64

    }
    class process << (S,Aquamarine) >> {
        - pid int32
        - hasCgroup bool
        - cpuLimit uint64
        - ncpu float64
        - proc *process.Process
        - stopTicker context.CancelFunc
        - lock sync.RWMutex
        - statCurrent cpuTimesStat
        - statCurrentTime time.Time
        - statPrevious cpuTimesStat
        - statPreviousTime time.Time

        - tick(ctx context.Context)
        - collect() cpuTimesStat
        - cpuTimes() (*cpuTimesStat, error)

        + Stop()
        + CPUPercent() (*CPUInfoStat, error)
        + VirtualMemory() (uint64, error)

    }
    class util << (S,Aquamarine) >> {
        - root fs.FS
        - cpuLimit uint64
        - ncpu float64
        - hasCgroup bool
        - cgroupType int
        - stopTicker context.CancelFunc
        - startOnce sync.Once
        - stopOnce sync.Once
        - lock sync.RWMutex
        - statCurrent cpuTimesStat
        - statCurrentTime time.Time
        - statPrevious cpuTimesStat
        - statPreviousTime time.Time

        - detectCgroupVersion() int
        - cgroupCPULimit(version int) (uint64, float64)
        - tick(ctx context.Context, interval time.Duration)
        - collect() cpuTimesStat
        - cpuTimes() (*cpuTimesStat, error)
        - cgroupCPUTimes(version int) (*cpuTimesStat, error)
        - cgroupVirtualMemory(version int) (*MemoryInfoStat, error)
        - readFile(path string) ([]string, error)

        + Process(pid int32) (Process, error)
        + Start()
        + Stop()
        + CPUCounts(logical bool) (float64, error)
        + CPUPercent() (*CPUInfoStat, error)
        + DiskUsage(path string) (*disk.UsageStat, error)
        + VirtualMemory() (*MemoryInfoStat, error)
        + NetIOCounters(pernic bool) ([]net.IOCountersStat, error)

    }
}

"psutil.Process" <|-- "psutil.process"
"psutil.Util" <|-- "psutil.util"
"service.Service" <|-- "psutil.util"
"update.Checker" <|-- "psutil.util"

namespace redirect {
    class Config << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + Redirects <font color=blue>map</font>[string]string

    }
}


namespace replace {
    interface Replacer  {
        + RegisterTemplate(placeholder string, template string, defaults <font color=blue>map</font>[string]string)
        + RegisterTemplateFunc(placeholder string, template TemplateFn, defaults <font color=blue>map</font>[string]string)
        + Replace(str string, placeholder string, value string, vars <font color=blue>map</font>[string]string, config *app.Config, section string) string

    }
    class replace.TemplateFn << (T, #FF7700) >>  {
    }
    class replacer << (S,Aquamarine) >> {
        - templates <font color=blue>map</font>[string]template
        - re *regexp.Regexp
        - templateRe *regexp.Regexp

        - compileTemplate(str string, params string, vars <font color=blue>map</font>[string]string, defaults <font color=blue>map</font>[string]string) string

        + RegisterTemplate(placeholder string, tmpl string, defaults <font color=blue>map</font>[string]string)
        + RegisterTemplateFunc(placeholder string, templateFn TemplateFn, defaults <font color=blue>map</font>[string]string)
        + Replace(str string, placeholder string, value string, vars <font color=blue>map</font>[string]string, config *app.Config, section string) string

    }
    class template << (S,Aquamarine) >> {
        - fn TemplateFn
        - defaults <font color=blue>map</font>[string]string

    }
    class "<font color=blue>func</font>(*app.Config, string) string" as fontcolorbluefuncfontappConfigstringstring {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"replace.Replacer" <|-- "replace.replacer"

namespace resolver {
    class Resolver << (S,Aquamarine) >> {
        + Restream restream.Restreamer
        + Monitor monitor.HistoryReader
        + LogBuffer log.BufferWriter

        + Mutation() graph.MutationResolver
        + Query() graph.QueryResolver

    }
    class mutationResolver << (S,Aquamarine) >> {
        + Ping(ctx context.Context) (string, error)

    }
    class queryResolver << (S,Aquamarine) >> {
        - getProcess(id string) (*models.Process, error)
        - playoutRequest(method string, addr string, path string, contentType string, data []byte) ([]byte, error)

        + About(ctx context.Context) (*models.About, error)
        + Log(ctx context.Context) ([]string, error)
        + Metrics(ctx context.Context, query models.MetricsInput) (*models.Metrics, error)
        + PlayoutStatus(ctx context.Context, id string, input string) (*models.RawAVstream, error)
        + Processes(ctx context.Context) ([]*models.Process, error)
        + Process(ctx context.Context, id string) (*models.Process, error)
        + Probe(ctx context.Context, id string) (*models.Probe, error)
        + Ping(ctx context.Context) (string, error)

    }
}
"resolver.Resolver" *-- "resolver.mutationResolver"
"resolver.Resolver" *-- "resolver.queryResolver"

"graph.ResolverRoot" <|-- "resolver.Resolver"
"graph.MutationResolver" <|-- "resolver.mutationResolver"
"graph.MutationResolver" <|-- "resolver.queryResolver"
"graph.QueryResolver" <|-- "resolver.queryResolver"

namespace restream {
    class Config << (S,Aquamarine) >> {
        + ID string
        + Name string
        + Store store.Store
        + Filesystems []fs.Filesystem
        + Replace replace.Replacer
        + FFmpeg ffmpeg.FFmpeg
        + MaxProcesses int64
        + Logger log.Logger

    }
    interface Restreamer  {
        + ID() string
        + Name() string
        + CreatedAt() time.Time
        + Start()
        + Stop()
        + AddProcess(config *app.Config) error
        + GetProcessIDs(idpattern string, refpattern string) []string
        + DeleteProcess(id string) error
        + UpdateProcess(id string, config *app.Config) error
        + StartProcess(id string) error
        + StopProcess(id string) error
        + RestartProcess(id string) error
        + ReloadProcess(id string) error
        + GetProcess(id string) (*app.Process, error)
        + GetProcessState(id string) (*app.State, error)
        + GetProcessLog(id string) (*app.Log, error)
        + GetPlayout(id string, inputid string) (string, error)
        + Probe(id string) app.Probe
        + ProbeWithTimeout(id string, timeout time.Duration) app.Probe
        + Skills() skills.Skills
        + ReloadSkills() error
        + SetProcessMetadata(id string, key string, data <font color=blue>interface</font>{}) error
        + GetProcessMetadata(id string, key string) (<font color=blue>interface</font>{}, error)
        + SetMetadata(key string, data <font color=blue>interface</font>{}) error
        + GetMetadata(key string) (<font color=blue>interface</font>{}, error)

    }
    class restream << (S,Aquamarine) >> {
        - id string
        - name string
        - createdAt time.Time
        - store store.Store
        - ffmpeg ffmpeg.FFmpeg
        - maxProc int64
        - nProc int64
        - fs <font color=blue>struct</font>{[]fs.Filesystem, []fs.Filesystem, context.CancelFunc}
        - replace replace.Replacer
        - tasks <font color=blue>map</font>[string]*task
        - logger log.Logger
        - metadata <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        - lock sync.RWMutex
        - startOnce sync.Once
        - stopOnce sync.Once

        - observe(ctx context.Context, fs fs.Filesystem, interval time.Duration)
        - load() error
        - save()
        - createTask(config *app.Config) (*task, error)
        - setCleanup(id string, config *app.Config)
        - unsetCleanup(id string)
        - setPlayoutPorts(t *task) error
        - unsetPlayoutPorts(t *task)
        - validateConfig(config *app.Config) (bool, error)
        - validateInputAddress(address string, basedir string) (string, error)
        - validateOutputAddress(address string, basedir string) (string, bool, error)
        - resolveAddresses(tasks <font color=blue>map</font>[string]*task, config *app.Config) error
        - resolveAddress(tasks <font color=blue>map</font>[string]*task, id string, address string) (string, error)
        - deleteProcess(id string) error
        - startProcess(id string) error
        - stopProcess(id string) error
        - restartProcess(id string) error
        - reloadProcess(id string) error

        + Start()
        + Stop()
        + ID() string
        + Name() string
        + CreatedAt() time.Time
        + AddProcess(config *app.Config) error
        + UpdateProcess(id string, config *app.Config) error
        + GetProcessIDs(idpattern string, refpattern string) []string
        + GetProcess(id string) (*app.Process, error)
        + DeleteProcess(id string) error
        + StartProcess(id string) error
        + StopProcess(id string) error
        + RestartProcess(id string) error
        + ReloadProcess(id string) error
        + GetProcessState(id string) (*app.State, error)
        + GetProcessLog(id string) (*app.Log, error)
        + Probe(id string) app.Probe
        + ProbeWithTimeout(id string, timeout time.Duration) app.Probe
        + Skills() skills.Skills
        + ReloadSkills() error
        + GetPlayout(id string, inputid string) (string, error)
        + SetProcessMetadata(id string, key string, data <font color=blue>interface</font>{}) error
        + GetProcessMetadata(id string, key string) (<font color=blue>interface</font>{}, error)
        + SetMetadata(key string, data <font color=blue>interface</font>{}) error
        + GetMetadata(key string) (<font color=blue>interface</font>{}, error)

    }
    class task << (S,Aquamarine) >> {
        - valid bool
        - id string
        - reference string
        - process *app.Process
        - config *app.Config
        - command []string
        - ffmpeg process.Process
        - parser parse.Parser
        - playout <font color=blue>map</font>[string]int
        - logger log.Logger
        - usesDisk bool
        - metadata <font color=blue>map</font>[string]<font color=blue>interface</font>{}

    }
}

"restream.Restreamer" <|-- "restream.restream"
"service.Service" <|-- "restream.restream"
"update.Checker" <|-- "restream.restream"

namespace router {
    interface Router  {
        + FileRoutes() <font color=blue>map</font>[string]string
        + DirRoutes() <font color=blue>map</font>[string]string
        + StaticRoute() (string, string)

    }
    class router << (S,Aquamarine) >> {
        - prefixes []string
        - fileRoutes <font color=blue>map</font>[string]string
        - dirRoutes <font color=blue>map</font>[string]string
        - staticRoute string

        + FileRoutes() <font color=blue>map</font>[string]string
        + DirRoutes() <font color=blue>map</font>[string]string
        + StaticRoute() (string, string)

    }
}

"router.Router" <|-- "router.router"

namespace rtmp {
    class Config << (S,Aquamarine) >> {
        + Logger log.Logger
        + Collector session.Collector
        + Addr string
        + TLSAddr string
        + App string
        + Token string
        + TLSConfig *tls.Config
        + ConnectionIdleTimeout time.Duration

    }
    interface Server  {
        + ListenAndServe() error
        + ListenAndServeTLS(certFile string, keyFile string) error
        + Close()
        + Channels() []string

    }
    class channel << (S,Aquamarine) >> {
        - queue *pubsub.Queue
        - metadata flvio.AMFMap
        - hasAudio bool
        - hasVideo bool
        - collector session.Collector
        - path string
        - reference string
        - publisher *client
        - subscriber <font color=blue>map</font>[string]*client
        - lock sync.RWMutex

        + Close()
        + AddSubscriber(conn *rtmp.Conn) string
        + RemoveSubscriber(id string)

    }
    class client << (S,Aquamarine) >> {
        - conn *rtmp.Conn
        - id string
        - createdAt time.Time
        - txbytes uint64
        - rxbytes uint64
        - collector session.Collector
        - cancel context.CancelFunc

        - ticker(ctx context.Context)

        + Close()

    }
    class server << (S,Aquamarine) >> {
        - app string
        - token string
        - logger log.Logger
        - collector session.Collector
        - server *rtmp.Server
        - tlsServer *rtmp.Server
        - channels <font color=blue>map</font>[string]*channel
        - lock sync.RWMutex

        - log(level log.Level, who string, action string, path string, message string, client net.Addr)
        - handlePlay(conn *rtmp.Conn)
        - handlePublish(conn *rtmp.Conn)

        + ListenAndServe() error
        + ListenAndServeTLS(certFile string, keyFile string) error
        + Close()
        + Channels() []string

    }
}

"rtmp.Server" <|-- "rtmp.server"

namespace scalars {
    class MetricsResponseValue << (S,Aquamarine) >> {
        - isNull bool

        + TS time.Time
        + Value float64

        + UnmarshalGQL(v <font color=blue>interface</font>{}) error
        + MarshalGQL(w io.Writer)

    }
    class Uint64 << (S,Aquamarine) >> {
        + UnmarshalGQL(v <font color=blue>interface</font>{}) error
        + MarshalGQL(w io.Writer)

    }
    class scalars.Uint64 << (T, #FF7700) >>  {
    }
}


namespace service {
    class Config << (S,Aquamarine) >> {
        + ID string
        + Version string
        + Domain string
        + URL string
        + Token string
        + Monitor metric.Reader
        + Logger log.Logger

    }
    interface Service  {
        + Start()
        + Stop()

    }
    class service << (S,Aquamarine) >> {
        - id string
        - version string
        - domain string
        - api api.API
        - monitor metric.Reader
        - startOnce sync.Once
        - stopOnce sync.Once
        - stopTicker context.CancelFunc
        - logger log.Logger

        - tick(ctx context.Context, interval time.Duration)
        - collect() (time.Duration, error)

        + Start()
        + Stop()

    }
}

"service.Service" <|-- "service.service"
"update.Checker" <|-- "service.service"

namespace session {
    interface Collector  {
        + Register(id string, reference string, location string, peer string)
        + Activate(id string) bool
        + RegisterAndActivate(id string, reference string, location string, peer string)
        + Extra(id string, extra string)
        + Unregister(id string)
        + Ingress(id string, size int64)
        + Egress(id string, size int64)
        + IngressBitrate() float64
        + EgressBitrate() float64
        + MaxIngressBitrate() float64
        + MaxEgressBitrate() float64
        + TopIngressBitrate() float64
        + TopEgressBitrate() float64
        + IsIngressBitrateExceeded() bool
        + IsEgressBitrateExceeded() bool
        + IsSessionsExceeded() bool
        + IsKnownSession(id string) bool
        + IsCollectableIP(ip string) bool
        + Summary() Summary
        + Active() []Session
        + SessionTopIngressBitrate(id string) float64
        + SessionTopEgressBitrate(id string) float64
        + SessionSetTopIngressBitrate(id string, bitrate float64)
        + SessionSetTopEgressBitrate(id string, bitrate float64)
        + Sessions() uint64
        + AddCompanion(collector Collector)
        + CompanionIngressBitrate() float64
        + CompanionEgressBitrate() float64
        + CompanionTopIngressBitrate() float64
        + CompanionTopEgressBitrate() float64
        + Stop()

    }
    class CollectorConfig << (S,Aquamarine) >> {
        + MaxRxBitrate uint64
        + MaxTxBitrate uint64
        + MaxSessions uint64
        + Limiter net.IPLimiter
        + InactiveTimeout time.Duration
        + SessionTimeout time.Duration
        + PersistInterval time.Duration

    }
    class Config << (S,Aquamarine) >> {
        + PersistFS fs.Filesystem
        + Logger log.Logger

    }
    class HLSConfig << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + EgressCollector session.Collector
        + IngressCollector session.Collector

    }
    class HTTPConfig << (S,Aquamarine) >> {
        + Skipper middleware.Skipper
        + Collector session.Collector

    }
    class Peers << (S,Aquamarine) >> {
        + Locations <font color=blue>map</font>[string]Stats

    }
    interface Registry  {
        + Register(id string, conf CollectorConfig) (Collector, error)
        + Unregister(id string) error
        + UnregisterAll()

    }
    interface RegistryReader  {
        + Collectors() []string
        + Collector(id string) Collector
        + Summary(id string) Summary
        + Active(id string) []Session

    }
    class Session << (S,Aquamarine) >> {
        + ID string
        + Reference string
        + CreatedAt time.Time
        + Location string
        + Peer string
        + Extra string
        + RxBytes uint64
        + RxBitrate float64
        + TopRxBitrate float64
        + TxBytes uint64
        + TxBitrate float64
        + TopTxBitrate float64

    }
    class Stats << (S,Aquamarine) >> {
        + TotalSessions uint64
        + TotalRxBytes uint64
        + TotalTxBytes uint64

    }
    class Summary << (S,Aquamarine) >> {
        + MaxSessions uint64
        + MaxRxBitrate float64
        + MaxTxBitrate float64
        + CurrentSessions uint64
        + CurrentRxBitrate float64
        + CurrentTxBitrate float64
        + Active []Session
        + Summary <font color=blue>struct</font>{<font color=blue>map</font>[string]Peers, <font color=blue>map</font>[string]Stats, <font color=blue>map</font>[string]{packageName}Stats, {packageName}Stats}

    }
    class bodyReader << (S,Aquamarine) >> {
        - reader io.ReadCloser
        - buffer bytes.Buffer
        - size int64

        - getSegments(dir string) []string

        + Read(b []byte) (int, error)
        + Close() error

    }
    class bodysizeReader << (S,Aquamarine) >> {
        - reader io.ReadCloser
        - size int64

        + Read(b []byte) (int, error)
        + Close() error

    }
    class collector << (S,Aquamarine) >> {
        - id string
        - logger log.Logger
        - sessions <font color=blue>map</font>[string]*session
        - sessionPool sync.Pool
        - sessionsWG sync.WaitGroup
        - staleCallback <font color=blue>func</font>(*session)
        - currentPendingSessions uint64
        - currentActiveSessions uint64
        - totalSessions uint64
        - rxBytes uint64
        - txBytes uint64
        - maxRxBitrate float64
        - maxTxBitrate float64
        - maxSessions uint64
        - rxBitrate *average.SlidingWindow
        - txBitrate *average.SlidingWindow
        - history history
        - persist <font color=blue>struct</font>{bool, fs.Filesystem, string, time.Duration, context.CancelFunc}
        - inactiveTimeout time.Duration
        - sessionTimeout time.Duration
        - limiter net.IPLimiter
        - companions []Collector
        - lock <font color=blue>struct</font>{sync.RWMutex, sync.RWMutex, sync.Mutex, sync.RWMutex}
        - startOnce sync.Once
        - stopOnce sync.Once

        - start()
        - persister(ctx context.Context, interval time.Duration)
        - loadHistory(fs fs.Filesystem, path string, data *history)
        - saveHistory(fs fs.Filesystem, path string, data *history)

        + Stop()
        + Persist()
        + IsCollectableIP(ip string) bool
        + IsKnownSession(id string) bool
        + RegisterAndActivate(id string, reference string, location string, peer string)
        + Register(id string, reference string, location string, peer string)
        + Unregister(id string)
        + Activate(id string) bool
        + Extra(id string, extra string)
        + Ingress(id string, size int64)
        + Egress(id string, size int64)
        + IsIngressBitrateExceeded() bool
        + IsEgressBitrateExceeded() bool
        + IsSessionsExceeded() bool
        + IngressBitrate() float64
        + EgressBitrate() float64
        + MaxIngressBitrate() float64
        + MaxEgressBitrate() float64
        + TopIngressBitrate() float64
        + TopEgressBitrate() float64
        + SessionTopIngressBitrate(id string) float64
        + SessionTopEgressBitrate(id string) float64
        + SessionSetTopIngressBitrate(id string, bitrate float64)
        + SessionSetTopEgressBitrate(id string, bitrate float64)
        + Sessions() uint64
        + Summary() Summary
        + Active() []Session
        + AddCompanion(collector Collector)
        + CompanionIngressBitrate() float64
        + CompanionEgressBitrate() float64
        + CompanionTopIngressBitrate() float64
        + CompanionTopEgressBitrate() float64

    }
    class fakeReader << (S,Aquamarine) >> {
        - reader io.ReadCloser
        - size int64

        + Read(b []byte) (int, error)
        + Close() error

    }
    class fakeWriter << (S,Aquamarine) >> {
        - size int64

        + Write(body []byte) (int, error)
        + Flush()

    }
    class history << (S,Aquamarine) >> {
        + Sessions <font color=blue>map</font>[string]totals

    }
    class hls << (S,Aquamarine) >> {
        - egressCollector session.Collector
        - ingressCollector session.Collector
        - reSessionID *regexp.Regexp
        - rxsegments <font color=blue>map</font>[string]int64
        - lock sync.Mutex

        - handleIngress(c echo.Context, next echo.HandlerFunc) error
        - handleEgress(c echo.Context, next echo.HandlerFunc) error

    }
    class nullCollector << (S,Aquamarine) >> {
        + Register(id string, reference string, location string, peer string)
        + Activate(id string) bool
        + RegisterAndActivate(id string, reference string, location string, peer string)
        + Extra(id string, extra string)
        + Unregister(id string)
        + Ingress(id string, size int64)
        + Egress(id string, size int64)
        + IngressBitrate() float64
        + EgressBitrate() float64
        + MaxIngressBitrate() float64
        + MaxEgressBitrate() float64
        + TopIngressBitrate() float64
        + TopEgressBitrate() float64
        + IsIngressBitrateExceeded() bool
        + IsEgressBitrateExceeded() bool
        + IsSessionsExceeded() bool
        + IsKnownSession(id string) bool
        + IsCollectableIP(ip string) bool
        + Summary() Summary
        + Active() []Session
        + SessionTopIngressBitrate(id string) float64
        + SessionTopEgressBitrate(id string) float64
        + SessionSetTopIngressBitrate(id string, bitrate float64)
        + SessionSetTopEgressBitrate(id string, bitrate float64)
        + Sessions() uint64
        + AddCompanion(collector Collector)
        + CompanionIngressBitrate() float64
        + CompanionEgressBitrate() float64
        + CompanionTopIngressBitrate() float64
        + CompanionTopEgressBitrate() float64
        + Stop()

    }
    class registry << (S,Aquamarine) >> {
        - collector <font color=blue>map</font>[string]*collector
        - persistFS fs.Filesystem
        - logger log.Logger
        - lock sync.Mutex

        + Register(id string, conf CollectorConfig) (Collector, error)
        + Unregister(id string) error
        + Collectors() []string
        + Collector(id string) Collector
        + UnregisterAll()
        + Summary(id string) Summary
        + Active(id string) []Session

    }
    class session << (S,Aquamarine) >> {
        - id string
        - reference string
        - createdAt time.Time
        - logger log.Logger
        - sessionActivate sync.Mutex
        - active bool
        - location string
        - peer string
        - extra string
        - stale *time.Timer
        - timeout time.Duration
        - callback <font color=blue>func</font>(*session)
        - rxBitrate *average.SlidingWindow
        - rxBytes uint64
        - txBitrate *average.SlidingWindow
        - txBytes uint64
        - tickerStop <font color=blue>chan</font> <font color=blue>struct</font>{}
        - sessionClose sync.Once
        - lock sync.Mutex
        - topRxBitrate float64
        - topTxBitrate float64
        - maxRxBitrate float64
        - maxTxBitrate float64

        - close()
        - ticker()

        + Init(id string, reference string, closeCallback <font color=blue>func</font>(*session) , inactive time.Duration, timeout time.Duration, logger log.Logger)
        + Register(location string, peer string)
        + Activate() bool
        + Extra(extra string)
        + Ingress(size int64) bool
        + Egress(size int64) bool
        + RxBitrate() float64
        + TxBitrate() float64
        + TopRxBitrate() float64
        + MaxTxBitrate() float64
        + MaxRxBitrate() float64
        + TopTxBitrate() float64
        + SetTopRxBitrate(bitrate float64)
        + SetTopTxBitrate(bitrate float64)
        + Cancel()

    }
    class sessionRewriter << (S,Aquamarine) >> {
        - buffer bytes.Buffer

        - rewriteHLS(sessionID string, requestURL *url.URL)

        + Write(data []byte) (int, error)

    }
    class totals << (S,Aquamarine) >> {
        + Location string
        + Peer string
        + Reference string
        + TotalSessions uint64
        + TotalRxBytes uint64
        + TotalTxBytes uint64

    }
}
"session.Stats" *-- "session.Peers"
"session.RegistryReader" *-- "session.Registry"
"http.ResponseWriter" *-- "session.fakeWriter"
"http.ResponseWriter" *-- "session.sessionRewriter"

"session.Collector" <|-- "session.collector"
"session.Collector" <|-- "session.nullCollector"
"session.Registry" <|-- "session.registry"
"session.RegistryReader" <|-- "session.registry"

namespace skills {
    class Codec << (S,Aquamarine) >> {
        + Id string
        + Name string
        + Encoders []string
        + Decoders []string

    }
    class Device << (S,Aquamarine) >> {
        + Id string
        + Name string
        + Devices []HWDevice

    }
    class Filter << (S,Aquamarine) >> {
        + Id string
        + Name string

    }
    class Format << (S,Aquamarine) >> {
        + Id string
        + Name string

    }
    class HWAccel << (S,Aquamarine) >> {
        + Id string
        + Name string

    }
    class HWDevice << (S,Aquamarine) >> {
        + Id string
        + Name string
        + Extra string
        + Media string

    }
    class Library << (S,Aquamarine) >> {
        + Name string
        + Compiled string
        + Linked string

    }
    class Protocol << (S,Aquamarine) >> {
        + Id string
        + Name string

    }
    class Skills << (S,Aquamarine) >> {
        + FFmpeg ffmpeg
        + Filters []Filter
        + HWAccels []HWAccel
        + Codecs ffCodecs
        + Devices ffDevices
        + Formats ffFormats
        + Protocols ffProtocols

    }
    class alsaCard << (S,Aquamarine) >> {
        - id string
        - name string

    }
    class fbformat << (S,Aquamarine) >> {
        - bpp int
        - roffset int
        - goffset int
        - boffset int
        - aoffset int
        - format string

    }
    class ffCodecs << (S,Aquamarine) >> {
        + Audio []Codec
        + Video []Codec
        + Subtitle []Codec

    }
    class ffDevices << (S,Aquamarine) >> {
        + Demuxers []Device
        + Muxers []Device

    }
    class ffFormats << (S,Aquamarine) >> {
        + Demuxers []Format
        + Muxers []Format

    }
    class ffProtocols << (S,Aquamarine) >> {
        + Input []Protocol
        + Output []Protocol

    }
    class ffmpeg << (S,Aquamarine) >> {
        + Version string
        + Compiler string
        + Configuration string
        + Libraries []Library

    }
}


namespace srt {
    class Channels << (S,Aquamarine) >> {
        + Publisher <font color=blue>map</font>[string]uint32
        + Subscriber <font color=blue>map</font>[string][]uint32
        + Connections <font color=blue>map</font>[uint32]Connection
        + Log <font color=blue>map</font>[string][]Log

    }
    class Config << (S,Aquamarine) >> {
        + Addr string
        + Token string
        + Passphrase string
        + Logger log.Logger
        + Collector session.Collector
        + SRTLogTopics []string

    }
    class Connection << (S,Aquamarine) >> {
        + Log <font color=blue>map</font>[string][]Log
        + Stats gosrt.Statistics

    }
    class Log << (S,Aquamarine) >> {
        + Timestamp time.Time
        + Message []string

    }
    interface Server  {
        + ListenAndServe() error
        + Close()
        + Channels() Channels

    }
    class channel << (S,Aquamarine) >> {
        - pubsub gosrt.PubSub
        - collector session.Collector
        - path string
        - publisher *client
        - subscriber <font color=blue>map</font>[string]*client
        - lock sync.RWMutex

        + Close()
        + AddSubscriber(conn gosrt.Conn, resource string) string
        + RemoveSubscriber(id string)

    }
    class client << (S,Aquamarine) >> {
        - conn gosrt.Conn
        - id string
        - createdAt time.Time
        - txbytes uint64
        - rxbytes uint64
        - collector session.Collector
        - cancel context.CancelFunc

        - ticker(ctx context.Context)

        + Close()

    }
    class server << (S,Aquamarine) >> {
        - addr string
        - token string
        - passphrase string
        - collector session.Collector
        - server gosrt.Server
        - channels <font color=blue>map</font>[string]*channel
        - lock sync.RWMutex
        - logger log.Logger
        - srtlogger gosrt.Logger
        - srtloggerCancel context.CancelFunc
        - srtlog <font color=blue>map</font>[string]*ring.Ring
        - srtlogLock sync.RWMutex

        - srtlogListener(ctx context.Context)
        - log(handler string, action string, resource string, message string, client net.Addr)
        - handleConnect(req gosrt.ConnRequest) gosrt.ConnType
        - handlePublish(conn gosrt.Conn)
        - handleSubscribe(conn gosrt.Conn)

        + ListenAndServe() error
        + Close()
        + Channels() Channels

    }
    class streamInfo << (S,Aquamarine) >> {
        - mode string
        - resource string
        - token string

    }
}

"srt.Server" <|-- "srt.server"

namespace store {
    class DataVersion << (S,Aquamarine) >> {
        + Version int64

    }
    class JSONConfig << (S,Aquamarine) >> {
        + Filesystem fs.Filesystem
        + Filepath string
        + Logger log.Logger

    }
    interface Store  {
        + Get() *config.Config
        + Set(data *config.Config) error
        + GetActive() *config.Config
        + SetActive(data *config.Config) error
        + Reload() error
        + Load() (StoreData, error)
        + Store(data StoreData) error

    }
    class StoreData << (S,Aquamarine) >> {
        + Version uint64
        + Process <font color=blue>map</font>[string]*app.Process
        + Metadata <font color=blue>struct</font>{<font color=blue>map</font>[string]<font color=blue>interface</font>{}, <font color=blue>map</font>[string]<font color=blue>map</font>[string]<font color=blue>interface</font>{}}

        - sanitize()

        + IsEmpty() bool

    }
    class jsonStore << (S,Aquamarine) >> {
        - fs fs.Filesystem
        - path string
        - data <font color=blue>map</font>[string]*config.Config
        - reloadFn <font color=blue>func</font>()
        - fs fs.Filesystem
        - filepath string
        - logger log.Logger
        - lock sync.RWMutex

        - load(cfg *config.Config) error
        - store(data *config.Config) error
        - store(filepath string, data StoreData) error
        - load(filepath string, version uint64) (StoreData, error)

        + Get() *config.Config
        + Set(d *config.Config) error
        + GetActive() *config.Config
        + SetActive(d *config.Config) error
        + Reload() error
        + Load() (StoreData, error)
        + Store(data StoreData) error

    }
    class storeVersion << (S,Aquamarine) >> {
        + Version uint64

    }
}

"store.Store" <|-- "store.jsonStore"

namespace update {
    interface Checker  {
        + Start()
        + Stop()

    }
    class Config << (S,Aquamarine) >> {
        + ID string
        + Name string
        + Version string
        + Arch string
        + Monitor metric.Reader
        + Logger log.Logger

    }
    class checkRequest << (S,Aquamarine) >> {
        + AppVersion string
        + CoreID string
        + CoreArch string
        + CoreUptimeSeconds uint64
        + CoreProcessRunning uint64
        + CoreProcessFailed uint64
        + CoreProcessKilled uint64
        + CoreViewer uint64

    }
    class checkResponse << (S,Aquamarine) >> {
        + LatestVersion string

    }
    class checker << (S,Aquamarine) >> {
        - id string
        - name string
        - version string
        - arch string
        - monitor metric.Reader
        - startOnce sync.Once
        - stopOnce sync.Once
        - stopTicker context.CancelFunc
        - logger log.Logger

        - tick(ctx context.Context, interval time.Duration, delay time.Duration)
        - check() error

        + Start()
        + Stop()

    }
}

"service.Service" <|-- "update.checker"
"update.Checker" <|-- "update.checker"

namespace url {
    class URL << (S,Aquamarine) >> {
        + Scheme string
        + Opaque string
        + User *url.Userinfo
        + Host string
        + RawPath string
        + RawQuery string
        + RawFragment string

        + Hostname() string
        + Port() string

    }
}


namespace v1 {
    class Config << (S,Aquamarine) >> {
        - fs fs.Filesystem
        - vars vars.Variables

        - init()

        + Get(name string) (string, error)
        + Set(name string, val string) error
        + Clone() *Config
        + Validate(resetLogs bool)
        + Merge()
        + Messages(logger <font color=blue>func</font>(string, vars.Variable, string) )
        + HasErrors() bool
        + Overrides() []string

    }
    class Data << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + LoadedAt time.Time
        + UpdatedAt time.Time
        + Version int64
        + ID string
        + Name string
        + Address string
        + CheckForUpdates bool
        + Log <font color=blue>struct</font>{string, []string, int}
        + DB <font color=blue>struct</font>{string}
        + Host <font color=blue>struct</font>{[]string, bool}
        + API <font color=blue>struct</font>{bool, <font color=blue>struct</font>{<font color=blue>struct</font>{[]string, []string}, <font color=blue>struct</font>{[]string, []string}}, <font color=blue>struct</font>{bool, bool, string, string, <font color=blue>struct</font>{string}, <font color=blue>struct</font>{bool, []value.Auth0Tenant}}}
        + TLS <font color=blue>struct</font>{string, bool, bool, string, string}
        + Storage <font color=blue>struct</font>{<font color=blue>struct</font>{string, int64, <font color=blue>struct</font>{bool, uint64, int64, uint64, []string}}, <font color=blue>struct</font>{<font color=blue>struct</font>{bool, string, string}, int64, bool}, <font color=blue>struct</font>{[]string}, string}
        + RTMP <font color=blue>struct</font>{bool, bool, string, string, string}
        + SRT <font color=blue>struct</font>{bool, string, string, string, <font color=blue>struct</font>{bool, []string}}
        + FFmpeg <font color=blue>struct</font>{string, int64, <font color=blue>struct</font>{<font color=blue>struct</font>{[]string, []string}, <font color=blue>struct</font>{[]string, []string}}, <font color=blue>struct</font>{int, int}}
        + Playout <font color=blue>struct</font>{bool, int, int}
        + Debug <font color=blue>struct</font>{bool, int}
        + Metrics <font color=blue>struct</font>{bool, bool, int64, int64}
        + Sessions <font color=blue>struct</font>{bool, []string, int, bool, int, uint64, uint64}
        + Service <font color=blue>struct</font>{bool, string, string}
        + Router <font color=blue>struct</font>{[]string, <font color=blue>map</font>[string]string, string}

    }
}
"v1.Data" *-- "v1.Config"


namespace v2 {
    class Config << (S,Aquamarine) >> {
        - fs fs.Filesystem
        - vars vars.Variables

        - init()

        + Get(name string) (string, error)
        + Set(name string, val string) error
        + Clone() *Config
        + Validate(resetLogs bool)
        + Merge()
        + Messages(logger <font color=blue>func</font>(string, vars.Variable, string) )
        + HasErrors() bool
        + Overrides() []string

    }
    class Data << (S,Aquamarine) >> {
        + CreatedAt time.Time
        + LoadedAt time.Time
        + UpdatedAt time.Time
        + Version int64
        + ID string
        + Name string
        + Address string
        + CheckForUpdates bool
        + Log <font color=blue>struct</font>{string, []string, int}
        + DB <font color=blue>struct</font>{string}
        + Host <font color=blue>struct</font>{[]string, bool}
        + API <font color=blue>struct</font>{bool, <font color=blue>struct</font>{<font color=blue>struct</font>{[]string, []string}, <font color=blue>struct</font>{[]string, []string}}, <font color=blue>struct</font>{bool, bool, string, string, <font color=blue>struct</font>{string}, <font color=blue>struct</font>{bool, []value.Auth0Tenant}}}
        + TLS <font color=blue>struct</font>{string, bool, bool, string, string}
        + Storage <font color=blue>struct</font>{<font color=blue>struct</font>{string, int64, <font color=blue>struct</font>{bool, uint64, int64, uint64, []string}}, <font color=blue>struct</font>{<font color=blue>struct</font>{bool, string, string}, int64, bool}, <font color=blue>struct</font>{[]string}, string}
        + RTMP <font color=blue>struct</font>{bool, bool, string, string, string, string}
        + SRT <font color=blue>struct</font>{bool, string, string, string, <font color=blue>struct</font>{bool, []string}}
        + FFmpeg <font color=blue>struct</font>{string, int64, <font color=blue>struct</font>{<font color=blue>struct</font>{[]string, []string}, <font color=blue>struct</font>{[]string, []string}}, <font color=blue>struct</font>{int, int}}
        + Playout <font color=blue>struct</font>{bool, int, int}
        + Debug <font color=blue>struct</font>{bool, int}
        + Metrics <font color=blue>struct</font>{bool, bool, int64, int64}
        + Sessions <font color=blue>struct</font>{bool, []string, int, bool, int, uint64, uint64}
        + Service <font color=blue>struct</font>{bool, string, string}
        + Router <font color=blue>struct</font>{[]string, <font color=blue>map</font>[string]string, string}

    }
}
"v2.Data" *-- "v2.Config"


namespace validator {
    class jsonValidator << (S,Aquamarine) >> {
        - validator *validator.Validate

        + Validate(i <font color=blue>interface</font>{}) error

    }
}


namespace value {
    class AbsolutePath << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Address << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Auth0Tenant << (S,Aquamarine) >> {
        + Domain string
        + Audience string
        + ClientID string
        + Users []string

        + String() string

    }
    class Bool << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class CIDRList << (S,Aquamarine) >> {
        - p *[]string
        - separator string

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class CORSOrigins << (S,Aquamarine) >> {
        - p *[]string
        - separator string

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Dir << (S,Aquamarine) >> {
        - p *string
        - fs fs.Filesystem

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Email << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Exec << (S,Aquamarine) >> {
        - p *string
        - fs fs.Filesystem

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class File << (S,Aquamarine) >> {
        - p *string
        - fs fs.Filesystem

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Int << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Int64 << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class MustDir << (S,Aquamarine) >> {
        - p *string
        - fs fs.Filesystem

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Port << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class S3Storage << (S,Aquamarine) >> {
        + Name string
        + Mountpoint string
        + Auth S3StorageAuth
        + Endpoint string
        + AccessKeyID string
        + SecretAccessKey string
        + Bucket string
        + Region string
        + UseSSL bool

        + String() string

    }
    class S3StorageAuth << (S,Aquamarine) >> {
        + Enable bool
        + Username string
        + Password string

    }
    class String << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class StringList << (S,Aquamarine) >> {
        - p *[]string
        - separator string

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class StringMapString << (S,Aquamarine) >> {
        - p *<font color=blue>map</font>[string]string

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class TenantList << (S,Aquamarine) >> {
        - p *[]Auth0Tenant
        - separator string

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Time << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class URL << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class Uint64 << (S,Aquamarine) >> {
        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    interface Value  {
        + String() string
        + Set( string) error
        + Validate() error
        + IsEmpty() bool

    }
    class s3StorageListValue << (S,Aquamarine) >> {
        - p *[]S3Storage
        - separator string
        - reName *regexp.Regexp

        + Set(val string) error
        + String() string
        + Validate() error
        + IsEmpty() bool

    }
    class value.AbsolutePath << (T, #FF7700) >>  {
    }
    class value.Address << (T, #FF7700) >>  {
    }
    class value.Bool << (T, #FF7700) >>  {
    }
    class value.Email << (T, #FF7700) >>  {
    }
    class value.Int << (T, #FF7700) >>  {
    }
    class value.Int64 << (T, #FF7700) >>  {
    }
    class value.Port << (T, #FF7700) >>  {
    }
    class value.String << (T, #FF7700) >>  {
    }
    class value.Time << (T, #FF7700) >>  {
    }
    class value.URL << (T, #FF7700) >>  {
    }
    class value.Uint64 << (T, #FF7700) >>  {
    }
    class "time.Time" as timeTime {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"value.Value" <|-- "value.AbsolutePath"
"value.Value" <|-- "value.Address"
"value.Value" <|-- "value.Bool"
"value.Value" <|-- "value.CIDRList"
"value.Value" <|-- "value.CORSOrigins"
"value.Value" <|-- "value.Dir"
"value.Value" <|-- "value.Email"
"value.Value" <|-- "value.Exec"
"value.Value" <|-- "value.File"
"value.Value" <|-- "value.Int"
"value.Value" <|-- "value.Int64"
"value.Value" <|-- "value.MustDir"
"value.Value" <|-- "value.Port"
"value.Value" <|-- "value.String"
"value.Value" <|-- "value.StringList"
"value.Value" <|-- "value.StringMapString"
"value.Value" <|-- "value.TenantList"
"value.Value" <|-- "value.Time"
"value.Value" <|-- "value.URL"
"value.Value" <|-- "value.Uint64"
"value.Value" <|-- "value.s3StorageListValue"

namespace vars {
    class Variable << (S,Aquamarine) >> {
        + Value string
        + Name string
        + EnvName string
        + Description string
        + Merged bool

    }
    class Variables << (S,Aquamarine) >> {
        - vars []*variable
        - logs []message

        - findVariable(name string) *variable

        + Register(val value.Value, name string, envName string, envAltNames []string, description string, required bool, disguise bool)
        + Transfer(vss *Variables)
        + SetDefault(name string)
        + Get(name string) (string, error)
        + Set(name string, val string) error
        + Log(level string, name string, format string, args ...<font color=blue>interface</font>{})
        + Merge()
        + IsMerged(name string) bool
        + Validate()
        + ResetLogs()
        + Messages(logger <font color=blue>func</font>(string, Variable, string) )
        + HasErrors() bool
        + Overrides() []string

    }
    class message << (S,Aquamarine) >> {
        - message string
        - variable Variable
        - level string

    }
    class variable << (S,Aquamarine) >> {
        - value value.Value
        - defVal string
        - name string
        - envName string
        - envAltNames []string
        - description string
        - required bool
        - disguise bool
        - merged bool

    }
}


"__builtin__.<font color=blue>map</font>[string][]string" #.. "api.ConfigError"
"__builtin__.bool" #.. "value.Bool"
"__builtin__.int" #.. "value.Int"
"__builtin__.int" #.. "value.Port"
"__builtin__.int64" #.. "value.Int64"
"__builtin__.string" #.. "models.Command"
"__builtin__.string" #.. "models.State"
"__builtin__.string" #.. "process.stateType"
"__builtin__.string" #.. "value.AbsolutePath"
"__builtin__.string" #.. "value.Address"
"__builtin__.string" #.. "value.Email"
"__builtin__.string" #.. "value.String"
"__builtin__.string" #.. "value.URL"
"__builtin__.uint" #.. "log.Level"
"__builtin__.uint64" #.. "scalars.Uint64"
"__builtin__.uint64" #.. "value.Uint64"
"api.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "api.LogEvent"
"api.<font color=blue>map</font>[string]SessionSummary" #.. "api.SessionsSummary"
"api.<font color=blue>map</font>[string][]Session" #.. "api.SessionsActive"
"jwks.<font color=blue>func</font>(error) " #.. "jwks.ErrorHandler"
"log.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "log.Fields"
"process.<font color=blue>func</font>(float64, uint64) " #.. "process.LimitFunc"
"replace.fontcolorbluefuncfontappConfigstringstring" #.. "replace.TemplateFn"
"value.timeTime" #.. "value.Time"
@enduml
